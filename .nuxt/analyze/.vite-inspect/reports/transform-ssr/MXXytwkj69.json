{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/vuetify/lib/composables/virtual.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Composables\nimport { useDisplay } from \"./display.mjs\";\nimport { useResizeObserver } from \"./resizeObserver.mjs\"; // Utilities\nimport { computed, nextTick, onScopeDispose, ref, shallowRef, watch, watchEffect } from 'vue';\nimport { clamp, debounce, IN_BROWSER, propsFactory } from \"../util/index.mjs\"; // Types\nconst UP = -1;\nconst DOWN = 1;\n\n/** Determines how large each batch of items should be */\nconst BUFFER_PX = 100;\nexport const makeVirtualProps = propsFactory({\n  itemHeight: {\n    type: [Number, String],\n    default: null\n  },\n  height: [Number, String]\n}, 'virtual');\nexport function useVirtual(props, items) {\n  const display = useDisplay();\n  const itemHeight = shallowRef(0);\n  watchEffect(() => {\n    itemHeight.value = parseFloat(props.itemHeight || 0);\n  });\n  const first = shallowRef(0);\n  const last = shallowRef(Math.ceil(\n  // Assume 16px items filling the entire screen height if\n  // not provided. This is probably incorrect but it minimises\n  // the chance of ending up with empty space at the bottom.\n  // The default value is set here to avoid poisoning getSize()\n  (parseInt(props.height) || display.height.value) / (itemHeight.value || 16)) || 1);\n  const paddingTop = shallowRef(0);\n  const paddingBottom = shallowRef(0);\n\n  /** The scrollable element */\n  const containerRef = ref();\n  /** An element marking the top of the scrollable area,\n   * used to add an offset if there's padding or other elements above the virtual list */\n  const markerRef = ref();\n  /** markerRef's offsetTop, lazily evaluated */\n  let markerOffset = 0;\n  const {\n    resizeRef,\n    contentRect\n  } = useResizeObserver();\n  watchEffect(() => {\n    resizeRef.value = containerRef.value;\n  });\n  const viewportHeight = computed(() => {\n    return containerRef.value === document.documentElement ? display.height.value : contentRect.value?.height || parseInt(props.height) || 0;\n  });\n  /** All static elements have been rendered and we have an assumed item height */\n  const hasInitialRender = computed(() => {\n    return !!(containerRef.value && markerRef.value && viewportHeight.value && itemHeight.value);\n  });\n  let sizes = Array.from({\n    length: items.value.length\n  });\n  let offsets = Array.from({\n    length: items.value.length\n  });\n  const updateTime = shallowRef(0);\n  let targetScrollIndex = -1;\n  function getSize(index) {\n    return sizes[index] || itemHeight.value;\n  }\n  const updateOffsets = debounce(() => {\n    const start = performance.now();\n    offsets[0] = 0;\n    const length = items.value.length;\n    for (let i = 1; i <= length - 1; i++) {\n      offsets[i] = (offsets[i - 1] || 0) + getSize(i - 1);\n    }\n    updateTime.value = Math.max(updateTime.value, performance.now() - start);\n  }, updateTime);\n  const unwatch = watch(hasInitialRender, v => {\n    if (!v) return;\n    // First render is complete, update offsets and visible\n    // items in case our assumed item height was incorrect\n\n    unwatch();\n    markerOffset = markerRef.value.offsetTop;\n    updateOffsets.immediate();\n    calculateVisibleItems();\n    if (!~targetScrollIndex) return;\n    nextTick(() => {\n      IN_BROWSER && window.requestAnimationFrame(() => {\n        scrollToIndex(targetScrollIndex);\n        targetScrollIndex = -1;\n      });\n    });\n  });\n  onScopeDispose(() => {\n    updateOffsets.clear();\n  });\n  function handleItemResize(index, height) {\n    const prevHeight = sizes[index];\n    const prevMinHeight = itemHeight.value;\n    itemHeight.value = prevMinHeight ? Math.min(itemHeight.value, height) : height;\n    if (prevHeight !== height || prevMinHeight !== itemHeight.value) {\n      sizes[index] = height;\n      updateOffsets();\n    }\n  }\n  function calculateOffset(index) {\n    index = clamp(index, 0, items.value.length - 1);\n    return offsets[index] || 0;\n  }\n  function calculateIndex(scrollTop) {\n    return binaryClosest(offsets, scrollTop);\n  }\n  let lastScrollTop = 0;\n  let scrollVelocity = 0;\n  let lastScrollTime = 0;\n  watch(viewportHeight, (val, oldVal) => {\n    if (oldVal) {\n      calculateVisibleItems();\n      if (val < oldVal) {\n        requestAnimationFrame(() => {\n          scrollVelocity = 0;\n          calculateVisibleItems();\n        });\n      }\n    }\n  });\n  function handleScroll() {\n    if (!containerRef.value || !markerRef.value) return;\n    const scrollTop = containerRef.value.scrollTop;\n    const scrollTime = performance.now();\n    const scrollDeltaT = scrollTime - lastScrollTime;\n    if (scrollDeltaT > 500) {\n      scrollVelocity = Math.sign(scrollTop - lastScrollTop);\n\n      // Not super important, only update at the\n      // start of a scroll sequence to avoid reflows\n      markerOffset = markerRef.value.offsetTop;\n    } else {\n      scrollVelocity = scrollTop - lastScrollTop;\n    }\n    lastScrollTop = scrollTop;\n    lastScrollTime = scrollTime;\n    calculateVisibleItems();\n  }\n  function handleScrollend() {\n    if (!containerRef.value || !markerRef.value) return;\n    scrollVelocity = 0;\n    lastScrollTime = 0;\n    calculateVisibleItems();\n  }\n  let raf = -1;\n  function calculateVisibleItems() {\n    cancelAnimationFrame(raf);\n    raf = requestAnimationFrame(_calculateVisibleItems);\n  }\n  function _calculateVisibleItems() {\n    if (!containerRef.value || !viewportHeight.value) return;\n    const scrollTop = lastScrollTop - markerOffset;\n    const direction = Math.sign(scrollVelocity);\n    const startPx = Math.max(0, scrollTop - BUFFER_PX);\n    const start = clamp(calculateIndex(startPx), 0, items.value.length);\n    const endPx = scrollTop + viewportHeight.value + BUFFER_PX;\n    const end = clamp(calculateIndex(endPx) + 1, start + 1, items.value.length);\n    if (\n    // Only update the side we're scrolling towards,\n    // the other side will be updated incidentally\n    (direction !== UP || start < first.value) && (direction !== DOWN || end > last.value)) {\n      const topOverflow = calculateOffset(first.value) - calculateOffset(start);\n      const bottomOverflow = calculateOffset(end) - calculateOffset(last.value);\n      const bufferOverflow = Math.max(topOverflow, bottomOverflow);\n      if (bufferOverflow > BUFFER_PX) {\n        first.value = start;\n        last.value = end;\n      } else {\n        // Only update the side that's reached its limit if there's still buffer left\n        if (start <= 0) first.value = start;\n        if (end >= items.value.length) last.value = end;\n      }\n    }\n    paddingTop.value = calculateOffset(first.value);\n    paddingBottom.value = calculateOffset(items.value.length) - calculateOffset(last.value);\n  }\n  function scrollToIndex(index) {\n    const offset = calculateOffset(index);\n    if (!containerRef.value || index && !offset) {\n      targetScrollIndex = index;\n    } else {\n      containerRef.value.scrollTop = offset;\n    }\n  }\n  const computedItems = computed(() => {\n    return items.value.slice(first.value, last.value).map((item, index) => ({\n      raw: item,\n      index: index + first.value\n    }));\n  });\n  watch(items, () => {\n    sizes = Array.from({\n      length: items.value.length\n    });\n    offsets = Array.from({\n      length: items.value.length\n    });\n    updateOffsets.immediate();\n    calculateVisibleItems();\n  }, {\n    deep: true\n  });\n  return {\n    containerRef,\n    markerRef,\n    computedItems,\n    paddingTop,\n    paddingBottom,\n    scrollToIndex,\n    handleScroll,\n    handleScrollend,\n    handleItemResize\n  };\n}\n\n// https://gist.github.com/robertleeplummerjr/1cc657191d34ecd0a324\nfunction binaryClosest(arr, val) {\n  let high = arr.length - 1;\n  let low = 0;\n  let mid = 0;\n  let item = null;\n  let target = -1;\n  if (arr[high] < val) {\n    return high;\n  }\n  while (low <= high) {\n    mid = low + high >> 1;\n    item = arr[mid];\n    if (item > val) {\n      high = mid - 1;\n    } else if (item < val) {\n      target = mid;\n      low = mid + 1;\n    } else if (item === val) {\n      return mid;\n    } else {\n      return low;\n    }\n  }\n  return target;\n}\n//# sourceMappingURL=virtual.mjs.map",
      "start": 1731941050137,
      "end": 1731941050357,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941050357,
      "end": 1731941050357,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941050357,
      "end": 1731941050357,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941050357,
      "end": 1731941050357,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941050357,
      "end": 1731941050357,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941050357,
      "end": 1731941050357,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941050357,
      "end": 1731941050357,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941050357,
      "end": 1731941050357,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1731941050357,
      "end": 1731941050358,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941050358,
      "end": 1731941050358,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941050358,
      "end": 1731941050359,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { useDisplay } from \"./display.mjs\";\nimport { useResizeObserver } from \"./resizeObserver.mjs\";\nimport { computed, nextTick, onScopeDispose, ref, shallowRef, watch, watchEffect } from \"vue\";\nimport { clamp, debounce, IN_BROWSER, propsFactory } from \"../util/index.mjs\";\nconst UP = -1;\nconst DOWN = 1;\nconst BUFFER_PX = 100;\nexport const makeVirtualProps = propsFactory({\n  itemHeight: {\n    type: [Number, String],\n    default: null\n  },\n  height: [Number, String]\n}, \"virtual\");\nexport function useVirtual(props, items) {\n  const display = useDisplay();\n  const itemHeight = shallowRef(0);\n  watchEffect(() => {\n    itemHeight.value = parseFloat(props.itemHeight || 0);\n  });\n  const first = shallowRef(0);\n  const last = shallowRef(Math.ceil(\n    // Assume 16px items filling the entire screen height if\n    // not provided. This is probably incorrect but it minimises\n    // the chance of ending up with empty space at the bottom.\n    // The default value is set here to avoid poisoning getSize()\n    (parseInt(props.height) || display.height.value) / (itemHeight.value || 16)\n  ) || 1);\n  const paddingTop = shallowRef(0);\n  const paddingBottom = shallowRef(0);\n  const containerRef = ref();\n  const markerRef = ref();\n  let markerOffset = 0;\n  const {\n    resizeRef,\n    contentRect\n  } = useResizeObserver();\n  watchEffect(() => {\n    resizeRef.value = containerRef.value;\n  });\n  const viewportHeight = computed(() => {\n    return containerRef.value === (void 0).documentElement ? display.height.value : contentRect.value?.height || parseInt(props.height) || 0;\n  });\n  const hasInitialRender = computed(() => {\n    return !!(containerRef.value && markerRef.value && viewportHeight.value && itemHeight.value);\n  });\n  let sizes = Array.from({\n    length: items.value.length\n  });\n  let offsets = Array.from({\n    length: items.value.length\n  });\n  const updateTime = shallowRef(0);\n  let targetScrollIndex = -1;\n  function getSize(index) {\n    return sizes[index] || itemHeight.value;\n  }\n  const updateOffsets = debounce(() => {\n    const start = performance.now();\n    offsets[0] = 0;\n    const length = items.value.length;\n    for (let i = 1; i <= length - 1; i++) {\n      offsets[i] = (offsets[i - 1] || 0) + getSize(i - 1);\n    }\n    updateTime.value = Math.max(updateTime.value, performance.now() - start);\n  }, updateTime);\n  const unwatch = watch(hasInitialRender, (v) => {\n    if (!v)\n      return;\n    unwatch();\n    markerOffset = markerRef.value.offsetTop;\n    updateOffsets.immediate();\n    calculateVisibleItems();\n    if (!~targetScrollIndex)\n      return;\n    nextTick(() => {\n      IN_BROWSER && (void 0).requestAnimationFrame(() => {\n        scrollToIndex(targetScrollIndex);\n        targetScrollIndex = -1;\n      });\n    });\n  });\n  onScopeDispose(() => {\n    updateOffsets.clear();\n  });\n  function handleItemResize(index, height) {\n    const prevHeight = sizes[index];\n    const prevMinHeight = itemHeight.value;\n    itemHeight.value = prevMinHeight ? Math.min(itemHeight.value, height) : height;\n    if (prevHeight !== height || prevMinHeight !== itemHeight.value) {\n      sizes[index] = height;\n      updateOffsets();\n    }\n  }\n  function calculateOffset(index) {\n    index = clamp(index, 0, items.value.length - 1);\n    return offsets[index] || 0;\n  }\n  function calculateIndex(scrollTop) {\n    return binaryClosest(offsets, scrollTop);\n  }\n  let lastScrollTop = 0;\n  let scrollVelocity = 0;\n  let lastScrollTime = 0;\n  watch(viewportHeight, (val, oldVal) => {\n    if (oldVal) {\n      calculateVisibleItems();\n      if (val < oldVal) {\n        requestAnimationFrame(() => {\n          scrollVelocity = 0;\n          calculateVisibleItems();\n        });\n      }\n    }\n  });\n  function handleScroll() {\n    if (!containerRef.value || !markerRef.value)\n      return;\n    const scrollTop = containerRef.value.scrollTop;\n    const scrollTime = performance.now();\n    const scrollDeltaT = scrollTime - lastScrollTime;\n    if (scrollDeltaT > 500) {\n      scrollVelocity = Math.sign(scrollTop - lastScrollTop);\n      markerOffset = markerRef.value.offsetTop;\n    } else {\n      scrollVelocity = scrollTop - lastScrollTop;\n    }\n    lastScrollTop = scrollTop;\n    lastScrollTime = scrollTime;\n    calculateVisibleItems();\n  }\n  function handleScrollend() {\n    if (!containerRef.value || !markerRef.value)\n      return;\n    scrollVelocity = 0;\n    lastScrollTime = 0;\n    calculateVisibleItems();\n  }\n  let raf = -1;\n  function calculateVisibleItems() {\n    cancelAnimationFrame(raf);\n    raf = requestAnimationFrame(_calculateVisibleItems);\n  }\n  function _calculateVisibleItems() {\n    if (!containerRef.value || !viewportHeight.value)\n      return;\n    const scrollTop = lastScrollTop - markerOffset;\n    const direction = Math.sign(scrollVelocity);\n    const startPx = Math.max(0, scrollTop - BUFFER_PX);\n    const start = clamp(calculateIndex(startPx), 0, items.value.length);\n    const endPx = scrollTop + viewportHeight.value + BUFFER_PX;\n    const end = clamp(calculateIndex(endPx) + 1, start + 1, items.value.length);\n    if (\n      // Only update the side we're scrolling towards,\n      // the other side will be updated incidentally\n      (direction !== UP || start < first.value) && (direction !== DOWN || end > last.value)\n    ) {\n      const topOverflow = calculateOffset(first.value) - calculateOffset(start);\n      const bottomOverflow = calculateOffset(end) - calculateOffset(last.value);\n      const bufferOverflow = Math.max(topOverflow, bottomOverflow);\n      if (bufferOverflow > BUFFER_PX) {\n        first.value = start;\n        last.value = end;\n      } else {\n        if (start <= 0)\n          first.value = start;\n        if (end >= items.value.length)\n          last.value = end;\n      }\n    }\n    paddingTop.value = calculateOffset(first.value);\n    paddingBottom.value = calculateOffset(items.value.length) - calculateOffset(last.value);\n  }\n  function scrollToIndex(index) {\n    const offset = calculateOffset(index);\n    if (!containerRef.value || index && !offset) {\n      targetScrollIndex = index;\n    } else {\n      containerRef.value.scrollTop = offset;\n    }\n  }\n  const computedItems = computed(() => {\n    return items.value.slice(first.value, last.value).map((item, index) => ({\n      raw: item,\n      index: index + first.value\n    }));\n  });\n  watch(items, () => {\n    sizes = Array.from({\n      length: items.value.length\n    });\n    offsets = Array.from({\n      length: items.value.length\n    });\n    updateOffsets.immediate();\n    calculateVisibleItems();\n  }, {\n    deep: true\n  });\n  return {\n    containerRef,\n    markerRef,\n    computedItems,\n    paddingTop,\n    paddingBottom,\n    scrollToIndex,\n    handleScroll,\n    handleScrollend,\n    handleItemResize\n  };\n}\nfunction binaryClosest(arr, val) {\n  let high = arr.length - 1;\n  let low = 0;\n  let mid = 0;\n  let item = null;\n  let target = -1;\n  if (arr[high] < val) {\n    return high;\n  }\n  while (low <= high) {\n    mid = low + high >> 1;\n    item = arr[mid];\n    if (item > val) {\n      high = mid - 1;\n    } else if (item < val) {\n      target = mid;\n      low = mid + 1;\n    } else if (item === val) {\n      return mid;\n    } else {\n      return low;\n    }\n  }\n  return target;\n}\n",
      "start": 1731941050359,
      "end": 1731941050375,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/vuetify/lib/composables/virtual.mjs\"],\n  \"sourcesContent\": [\"// Composables\\nimport { useDisplay } from \\\"./display.mjs\\\";\\nimport { useResizeObserver } from \\\"./resizeObserver.mjs\\\"; // Utilities\\nimport { computed, nextTick, onScopeDispose, ref, shallowRef, watch, watchEffect } from 'vue';\\nimport { clamp, debounce, IN_BROWSER, propsFactory } from \\\"../util/index.mjs\\\"; // Types\\nconst UP = -1;\\nconst DOWN = 1;\\n\\n/** Determines how large each batch of items should be */\\nconst BUFFER_PX = 100;\\nexport const makeVirtualProps = propsFactory({\\n  itemHeight: {\\n    type: [Number, String],\\n    default: null\\n  },\\n  height: [Number, String]\\n}, 'virtual');\\nexport function useVirtual(props, items) {\\n  const display = useDisplay();\\n  const itemHeight = shallowRef(0);\\n  watchEffect(() => {\\n    itemHeight.value = parseFloat(props.itemHeight || 0);\\n  });\\n  const first = shallowRef(0);\\n  const last = shallowRef(Math.ceil(\\n  // Assume 16px items filling the entire screen height if\\n  // not provided. This is probably incorrect but it minimises\\n  // the chance of ending up with empty space at the bottom.\\n  // The default value is set here to avoid poisoning getSize()\\n  (parseInt(props.height) || display.height.value) / (itemHeight.value || 16)) || 1);\\n  const paddingTop = shallowRef(0);\\n  const paddingBottom = shallowRef(0);\\n\\n  /** The scrollable element */\\n  const containerRef = ref();\\n  /** An element marking the top of the scrollable area,\\n   * used to add an offset if there's padding or other elements above the virtual list */\\n  const markerRef = ref();\\n  /** markerRef's offsetTop, lazily evaluated */\\n  let markerOffset = 0;\\n  const {\\n    resizeRef,\\n    contentRect\\n  } = useResizeObserver();\\n  watchEffect(() => {\\n    resizeRef.value = containerRef.value;\\n  });\\n  const viewportHeight = computed(() => {\\n    return containerRef.value === document.documentElement ? display.height.value : contentRect.value?.height || parseInt(props.height) || 0;\\n  });\\n  /** All static elements have been rendered and we have an assumed item height */\\n  const hasInitialRender = computed(() => {\\n    return !!(containerRef.value && markerRef.value && viewportHeight.value && itemHeight.value);\\n  });\\n  let sizes = Array.from({\\n    length: items.value.length\\n  });\\n  let offsets = Array.from({\\n    length: items.value.length\\n  });\\n  const updateTime = shallowRef(0);\\n  let targetScrollIndex = -1;\\n  function getSize(index) {\\n    return sizes[index] || itemHeight.value;\\n  }\\n  const updateOffsets = debounce(() => {\\n    const start = performance.now();\\n    offsets[0] = 0;\\n    const length = items.value.length;\\n    for (let i = 1; i <= length - 1; i++) {\\n      offsets[i] = (offsets[i - 1] || 0) + getSize(i - 1);\\n    }\\n    updateTime.value = Math.max(updateTime.value, performance.now() - start);\\n  }, updateTime);\\n  const unwatch = watch(hasInitialRender, v => {\\n    if (!v) return;\\n    // First render is complete, update offsets and visible\\n    // items in case our assumed item height was incorrect\\n\\n    unwatch();\\n    markerOffset = markerRef.value.offsetTop;\\n    updateOffsets.immediate();\\n    calculateVisibleItems();\\n    if (!~targetScrollIndex) return;\\n    nextTick(() => {\\n      IN_BROWSER && window.requestAnimationFrame(() => {\\n        scrollToIndex(targetScrollIndex);\\n        targetScrollIndex = -1;\\n      });\\n    });\\n  });\\n  onScopeDispose(() => {\\n    updateOffsets.clear();\\n  });\\n  function handleItemResize(index, height) {\\n    const prevHeight = sizes[index];\\n    const prevMinHeight = itemHeight.value;\\n    itemHeight.value = prevMinHeight ? Math.min(itemHeight.value, height) : height;\\n    if (prevHeight !== height || prevMinHeight !== itemHeight.value) {\\n      sizes[index] = height;\\n      updateOffsets();\\n    }\\n  }\\n  function calculateOffset(index) {\\n    index = clamp(index, 0, items.value.length - 1);\\n    return offsets[index] || 0;\\n  }\\n  function calculateIndex(scrollTop) {\\n    return binaryClosest(offsets, scrollTop);\\n  }\\n  let lastScrollTop = 0;\\n  let scrollVelocity = 0;\\n  let lastScrollTime = 0;\\n  watch(viewportHeight, (val, oldVal) => {\\n    if (oldVal) {\\n      calculateVisibleItems();\\n      if (val < oldVal) {\\n        requestAnimationFrame(() => {\\n          scrollVelocity = 0;\\n          calculateVisibleItems();\\n        });\\n      }\\n    }\\n  });\\n  function handleScroll() {\\n    if (!containerRef.value || !markerRef.value) return;\\n    const scrollTop = containerRef.value.scrollTop;\\n    const scrollTime = performance.now();\\n    const scrollDeltaT = scrollTime - lastScrollTime;\\n    if (scrollDeltaT > 500) {\\n      scrollVelocity = Math.sign(scrollTop - lastScrollTop);\\n\\n      // Not super important, only update at the\\n      // start of a scroll sequence to avoid reflows\\n      markerOffset = markerRef.value.offsetTop;\\n    } else {\\n      scrollVelocity = scrollTop - lastScrollTop;\\n    }\\n    lastScrollTop = scrollTop;\\n    lastScrollTime = scrollTime;\\n    calculateVisibleItems();\\n  }\\n  function handleScrollend() {\\n    if (!containerRef.value || !markerRef.value) return;\\n    scrollVelocity = 0;\\n    lastScrollTime = 0;\\n    calculateVisibleItems();\\n  }\\n  let raf = -1;\\n  function calculateVisibleItems() {\\n    cancelAnimationFrame(raf);\\n    raf = requestAnimationFrame(_calculateVisibleItems);\\n  }\\n  function _calculateVisibleItems() {\\n    if (!containerRef.value || !viewportHeight.value) return;\\n    const scrollTop = lastScrollTop - markerOffset;\\n    const direction = Math.sign(scrollVelocity);\\n    const startPx = Math.max(0, scrollTop - BUFFER_PX);\\n    const start = clamp(calculateIndex(startPx), 0, items.value.length);\\n    const endPx = scrollTop + viewportHeight.value + BUFFER_PX;\\n    const end = clamp(calculateIndex(endPx) + 1, start + 1, items.value.length);\\n    if (\\n    // Only update the side we're scrolling towards,\\n    // the other side will be updated incidentally\\n    (direction !== UP || start < first.value) && (direction !== DOWN || end > last.value)) {\\n      const topOverflow = calculateOffset(first.value) - calculateOffset(start);\\n      const bottomOverflow = calculateOffset(end) - calculateOffset(last.value);\\n      const bufferOverflow = Math.max(topOverflow, bottomOverflow);\\n      if (bufferOverflow > BUFFER_PX) {\\n        first.value = start;\\n        last.value = end;\\n      } else {\\n        // Only update the side that's reached its limit if there's still buffer left\\n        if (start <= 0) first.value = start;\\n        if (end >= items.value.length) last.value = end;\\n      }\\n    }\\n    paddingTop.value = calculateOffset(first.value);\\n    paddingBottom.value = calculateOffset(items.value.length) - calculateOffset(last.value);\\n  }\\n  function scrollToIndex(index) {\\n    const offset = calculateOffset(index);\\n    if (!containerRef.value || index && !offset) {\\n      targetScrollIndex = index;\\n    } else {\\n      containerRef.value.scrollTop = offset;\\n    }\\n  }\\n  const computedItems = computed(() => {\\n    return items.value.slice(first.value, last.value).map((item, index) => ({\\n      raw: item,\\n      index: index + first.value\\n    }));\\n  });\\n  watch(items, () => {\\n    sizes = Array.from({\\n      length: items.value.length\\n    });\\n    offsets = Array.from({\\n      length: items.value.length\\n    });\\n    updateOffsets.immediate();\\n    calculateVisibleItems();\\n  }, {\\n    deep: true\\n  });\\n  return {\\n    containerRef,\\n    markerRef,\\n    computedItems,\\n    paddingTop,\\n    paddingBottom,\\n    scrollToIndex,\\n    handleScroll,\\n    handleScrollend,\\n    handleItemResize\\n  };\\n}\\n\\n// https://gist.github.com/robertleeplummerjr/1cc657191d34ecd0a324\\nfunction binaryClosest(arr, val) {\\n  let high = arr.length - 1;\\n  let low = 0;\\n  let mid = 0;\\n  let item = null;\\n  let target = -1;\\n  if (arr[high] < val) {\\n    return high;\\n  }\\n  while (low <= high) {\\n    mid = low + high >> 1;\\n    item = arr[mid];\\n    if (item > val) {\\n      high = mid - 1;\\n    } else if (item < val) {\\n      target = mid;\\n      low = mid + 1;\\n    } else if (item === val) {\\n      return mid;\\n    } else {\\n      return low;\\n    }\\n  }\\n  return target;\\n}\\n//# sourceMappingURL=virtual.mjs.map\"],\n  \"mappings\": \"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\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1731941050375,
      "end": 1731941050375,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941050375,
      "end": 1731941050375,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941050375,
      "end": 1731941050375,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941050375,
      "end": 1731941050375,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941050375,
      "end": 1731941050375,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941050375,
      "end": 1731941050375,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941050376,
      "end": 1731941050376,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1731941050376,
      "end": 1731941050377,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941050377,
      "end": 1731941050377,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941050377,
      "end": 1731941050377,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941050377,
      "end": 1731941050377,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941050377,
      "end": 1731941050377,
      "order": "normal"
    }
  ]
}
