{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/vuetify/lib/components/VOtpInput/VOtpInput.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"./VOtpInput.css\";\n\n// Components\nimport { makeVFieldProps, VField } from \"../VField/VField.mjs\";\nimport { VOverlay } from \"../VOverlay/VOverlay.mjs\";\nimport { VProgressCircular } from \"../VProgressCircular/VProgressCircular.mjs\"; // Composables\nimport { provideDefaults } from \"../../composables/defaults.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeFocusProps, useFocus } from \"../../composables/focus.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed, nextTick, ref, watch } from 'vue';\nimport { filterInputAttrs, focusChild, genericComponent, only, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n// Types\nexport const makeVOtpInputProps = propsFactory({\n  autofocus: Boolean,\n  divider: String,\n  focusAll: Boolean,\n  label: {\n    type: String,\n    default: '$vuetify.input.otp'\n  },\n  length: {\n    type: [Number, String],\n    default: 6\n  },\n  modelValue: {\n    type: [Number, String],\n    default: undefined\n  },\n  placeholder: String,\n  type: {\n    type: String,\n    default: 'number'\n  },\n  ...makeDimensionProps(),\n  ...makeFocusProps(),\n  ...only(makeVFieldProps({\n    variant: 'outlined'\n  }), ['baseColor', 'bgColor', 'class', 'color', 'disabled', 'error', 'loading', 'rounded', 'style', 'theme', 'variant'])\n}, 'VOtpInput');\nexport const VOtpInput = genericComponent()({\n  name: 'VOtpInput',\n  props: makeVOtpInputProps(),\n  emits: {\n    finish: val => true,\n    'update:focused': val => true,\n    'update:modelValue': val => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const model = useProxiedModel(props, 'modelValue', '', val => String(val).split(''), val => val.join(''));\n    const {\n      t\n    } = useLocale();\n    const length = computed(() => Number(props.length));\n    const fields = computed(() => Array(length.value).fill(0));\n    const focusIndex = ref(-1);\n    const contentRef = ref();\n    const inputRef = ref([]);\n    const current = computed(() => inputRef.value[focusIndex.value]);\n    function onInput() {\n      // The maxlength attribute doesn't work for the number type input, so the text type is used.\n      // The following logic simulates the behavior of a number input.\n      if (props.type === 'number' && /[^0-9]/g.test(current.value.value)) {\n        current.value.value = '';\n        return;\n      }\n      const array = model.value.slice();\n      const value = current.value.value;\n      array[focusIndex.value] = value;\n      let target = null;\n      if (focusIndex.value > model.value.length) {\n        target = model.value.length + 1;\n      } else if (focusIndex.value + 1 !== length.value) {\n        target = 'next';\n      }\n      model.value = array;\n      if (target) focusChild(contentRef.value, target);\n    }\n    function onKeydown(e) {\n      const array = model.value.slice();\n      const index = focusIndex.value;\n      let target = null;\n      if (!['ArrowLeft', 'ArrowRight', 'Backspace', 'Delete'].includes(e.key)) return;\n      e.preventDefault();\n      if (e.key === 'ArrowLeft') {\n        target = 'prev';\n      } else if (e.key === 'ArrowRight') {\n        target = 'next';\n      } else if (['Backspace', 'Delete'].includes(e.key)) {\n        array[focusIndex.value] = '';\n        model.value = array;\n        if (focusIndex.value > 0 && e.key === 'Backspace') {\n          target = 'prev';\n        } else {\n          requestAnimationFrame(() => {\n            inputRef.value[index]?.select();\n          });\n        }\n      }\n      requestAnimationFrame(() => {\n        if (target != null) {\n          focusChild(contentRef.value, target);\n        }\n      });\n    }\n    function onPaste(index, e) {\n      e.preventDefault();\n      e.stopPropagation();\n      model.value = (e?.clipboardData?.getData('Text') ?? '').split('');\n      inputRef.value?.[index].blur();\n    }\n    function reset() {\n      model.value = [];\n    }\n    function onFocus(e, index) {\n      focus();\n      focusIndex.value = index;\n    }\n    function onBlur() {\n      blur();\n      focusIndex.value = -1;\n    }\n    provideDefaults({\n      VField: {\n        color: computed(() => props.color),\n        bgColor: computed(() => props.color),\n        baseColor: computed(() => props.baseColor),\n        disabled: computed(() => props.disabled),\n        error: computed(() => props.error),\n        variant: computed(() => props.variant)\n      }\n    }, {\n      scoped: true\n    });\n    watch(model, val => {\n      if (val.length === length.value) emit('finish', val.join(''));\n    }, {\n      deep: true\n    });\n    watch(focusIndex, val => {\n      if (val < 0) return;\n      nextTick(() => {\n        inputRef.value[val]?.select();\n      });\n    });\n    useRender(() => {\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      return _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-otp-input', {\n          'v-otp-input--divided': !!props.divider\n        }, props.class],\n        \"style\": [props.style]\n      }, rootAttrs), [_createVNode(\"div\", {\n        \"ref\": contentRef,\n        \"class\": \"v-otp-input__content\",\n        \"style\": [dimensionStyles.value]\n      }, [fields.value.map((_, i) => _createVNode(_Fragment, null, [props.divider && i !== 0 && _createVNode(\"span\", {\n        \"class\": \"v-otp-input__divider\"\n      }, [props.divider]), _createVNode(VField, {\n        \"focused\": isFocused.value && props.focusAll || focusIndex.value === i,\n        \"key\": i\n      }, {\n        ...slots,\n        loader: undefined,\n        default: () => {\n          return _createVNode(\"input\", {\n            \"ref\": val => inputRef.value[i] = val,\n            \"aria-label\": t(props.label, i + 1),\n            \"autofocus\": i === 0 && props.autofocus,\n            \"autocomplete\": \"one-time-code\",\n            \"class\": ['v-otp-input__field'],\n            \"disabled\": props.disabled,\n            \"inputmode\": props.type === 'number' ? 'numeric' : 'text',\n            \"min\": props.type === 'number' ? 0 : undefined,\n            \"maxlength\": \"1\",\n            \"placeholder\": props.placeholder,\n            \"type\": props.type === 'number' ? 'text' : props.type,\n            \"value\": model.value[i],\n            \"onInput\": onInput,\n            \"onFocus\": e => onFocus(e, i),\n            \"onBlur\": onBlur,\n            \"onKeydown\": onKeydown,\n            \"onPaste\": event => onPaste(i, event)\n          }, null);\n        }\n      })])), _createVNode(\"input\", _mergeProps({\n        \"class\": \"v-otp-input-input\",\n        \"type\": \"hidden\"\n      }, inputAttrs, {\n        \"value\": model.value.join('')\n      }), null), _createVNode(VOverlay, {\n        \"contained\": true,\n        \"content-class\": \"v-otp-input__loader\",\n        \"model-value\": !!props.loading,\n        \"persistent\": true\n      }, {\n        default: () => [slots.loader?.() ?? _createVNode(VProgressCircular, {\n          \"color\": typeof props.loading === 'boolean' ? undefined : props.loading,\n          \"indeterminate\": true,\n          \"size\": \"24\",\n          \"width\": \"2\"\n        }, null)]\n      }), slots.default?.()])]);\n    });\n    return {\n      blur: () => {\n        inputRef.value?.some(input => input.blur());\n      },\n      focus: () => {\n        inputRef.value?.[0].focus();\n      },\n      reset,\n      isFocused\n    };\n  }\n});\n//# sourceMappingURL=VOtpInput.mjs.map",
      "start": 1731941018924,
      "end": 1731941019090,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941019091,
      "end": 1731941019091,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941019092,
      "end": 1731941019092,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941019092,
      "end": 1731941019093,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941019093,
      "end": 1731941019093,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941019093,
      "end": 1731941019093,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941019093,
      "end": 1731941019093,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941019093,
      "end": 1731941019093,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941019093,
      "end": 1731941019094,
      "order": "normal"
    }
  ]
}
