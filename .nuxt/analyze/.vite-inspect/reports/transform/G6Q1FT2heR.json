{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/vuetify/lib/components/VRangeSlider/VRangeSlider.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"../VSlider/VSlider.css\";\n\n// Components\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VLabel } from \"../VLabel/index.mjs\";\nimport { getOffset, makeSliderProps, useSlider, useSteps } from \"../VSlider/slider.mjs\";\nimport { VSliderThumb } from \"../VSlider/VSliderThumb.mjs\";\nimport { VSliderTrack } from \"../VSlider/VSliderTrack.mjs\"; // Composables\nimport { makeFocusProps, useFocus } from \"../../composables/focus.mjs\";\nimport { useRtl } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed, ref } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVRangeSliderProps = propsFactory({\n  ...makeFocusProps(),\n  ...makeVInputProps(),\n  ...makeSliderProps(),\n  strict: Boolean,\n  modelValue: {\n    type: Array,\n    default: () => [0, 0]\n  }\n}, 'VRangeSlider');\nexport const VRangeSlider = genericComponent()({\n  name: 'VRangeSlider',\n  props: makeVRangeSliderProps(),\n  emits: {\n    'update:focused': value => true,\n    'update:modelValue': value => true,\n    end: value => true,\n    start: value => true\n  },\n  setup(props, _ref) {\n    let {\n      slots,\n      emit\n    } = _ref;\n    const startThumbRef = ref();\n    const stopThumbRef = ref();\n    const inputRef = ref();\n    const {\n      rtlClasses\n    } = useRtl();\n    function getActiveThumb(e) {\n      if (!startThumbRef.value || !stopThumbRef.value) return;\n      const startOffset = getOffset(e, startThumbRef.value.$el, props.direction);\n      const stopOffset = getOffset(e, stopThumbRef.value.$el, props.direction);\n      const a = Math.abs(startOffset);\n      const b = Math.abs(stopOffset);\n      return a < b || a === b && startOffset < 0 ? startThumbRef.value.$el : stopThumbRef.value.$el;\n    }\n    const steps = useSteps(props);\n    const model = useProxiedModel(props, 'modelValue', undefined, arr => {\n      if (!arr?.length) return [0, 0];\n      return arr.map(value => steps.roundValue(value));\n    });\n    const {\n      activeThumbRef,\n      hasLabels,\n      max,\n      min,\n      mousePressed,\n      onSliderMousedown,\n      onSliderTouchstart,\n      position,\n      trackContainerRef\n    } = useSlider({\n      props,\n      steps,\n      onSliderStart: () => {\n        emit('start', model.value);\n      },\n      onSliderEnd: _ref2 => {\n        let {\n          value\n        } = _ref2;\n        const newValue = activeThumbRef.value === startThumbRef.value?.$el ? [value, model.value[1]] : [model.value[0], value];\n        if (!props.strict && newValue[0] < newValue[1]) {\n          model.value = newValue;\n        }\n        emit('end', model.value);\n      },\n      onSliderMove: _ref3 => {\n        let {\n          value\n        } = _ref3;\n        const [start, stop] = model.value;\n        if (!props.strict && start === stop && start !== min.value) {\n          activeThumbRef.value = value > start ? stopThumbRef.value?.$el : startThumbRef.value?.$el;\n          activeThumbRef.value?.focus();\n        }\n        if (activeThumbRef.value === startThumbRef.value?.$el) {\n          model.value = [Math.min(value, stop), stop];\n        } else {\n          model.value = [start, Math.max(start, value)];\n        }\n      },\n      getActiveThumb\n    });\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const trackStart = computed(() => position(model.value[0]));\n    const trackStop = computed(() => position(model.value[1]));\n    useRender(() => {\n      const inputProps = VInput.filterProps(props);\n      const hasPrepend = !!(props.label || slots.label || slots.prepend);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-slider', 'v-range-slider', {\n          'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n          'v-slider--focused': isFocused.value,\n          'v-slider--pressed': mousePressed.value,\n          'v-slider--disabled': props.disabled\n        }, rtlClasses.value, props.class],\n        \"style\": props.style,\n        \"ref\": inputRef\n      }, inputProps, {\n        \"focused\": isFocused.value\n      }), {\n        ...slots,\n        prepend: hasPrepend ? slotProps => _createVNode(_Fragment, null, [slots.label?.(slotProps) ?? (props.label ? _createVNode(VLabel, {\n          \"class\": \"v-slider__label\",\n          \"text\": props.label\n        }, null) : undefined), slots.prepend?.(slotProps)]) : undefined,\n        default: _ref4 => {\n          let {\n            id,\n            messagesId\n          } = _ref4;\n          return _createVNode(\"div\", {\n            \"class\": \"v-slider__container\",\n            \"onMousedown\": onSliderMousedown,\n            \"onTouchstartPassive\": onSliderTouchstart\n          }, [_createVNode(\"input\", {\n            \"id\": `${id.value}_start`,\n            \"name\": props.name || id.value,\n            \"disabled\": !!props.disabled,\n            \"readonly\": !!props.readonly,\n            \"tabindex\": \"-1\",\n            \"value\": model.value[0]\n          }, null), _createVNode(\"input\", {\n            \"id\": `${id.value}_stop`,\n            \"name\": props.name || id.value,\n            \"disabled\": !!props.disabled,\n            \"readonly\": !!props.readonly,\n            \"tabindex\": \"-1\",\n            \"value\": model.value[1]\n          }, null), _createVNode(VSliderTrack, {\n            \"ref\": trackContainerRef,\n            \"start\": trackStart.value,\n            \"stop\": trackStop.value\n          }, {\n            'tick-label': slots['tick-label']\n          }), _createVNode(VSliderThumb, {\n            \"ref\": startThumbRef,\n            \"aria-describedby\": messagesId.value,\n            \"focused\": isFocused && activeThumbRef.value === startThumbRef.value?.$el,\n            \"modelValue\": model.value[0],\n            \"onUpdate:modelValue\": v => model.value = [v, model.value[1]],\n            \"onFocus\": e => {\n              focus();\n              activeThumbRef.value = startThumbRef.value?.$el;\n\n              // Make sure second thumb is focused if\n              // the thumbs are on top of each other\n              // and they are both at minimum value\n              // but only if focused from outside.\n              if (model.value[0] === model.value[1] && model.value[1] === min.value && e.relatedTarget !== stopThumbRef.value?.$el) {\n                startThumbRef.value?.$el.blur();\n                stopThumbRef.value?.$el.focus();\n              }\n            },\n            \"onBlur\": () => {\n              blur();\n              activeThumbRef.value = undefined;\n            },\n            \"min\": min.value,\n            \"max\": model.value[1],\n            \"position\": trackStart.value,\n            \"ripple\": props.ripple\n          }, {\n            'thumb-label': slots['thumb-label']\n          }), _createVNode(VSliderThumb, {\n            \"ref\": stopThumbRef,\n            \"aria-describedby\": messagesId.value,\n            \"focused\": isFocused && activeThumbRef.value === stopThumbRef.value?.$el,\n            \"modelValue\": model.value[1],\n            \"onUpdate:modelValue\": v => model.value = [model.value[0], v],\n            \"onFocus\": e => {\n              focus();\n              activeThumbRef.value = stopThumbRef.value?.$el;\n\n              // Make sure first thumb is focused if\n              // the thumbs are on top of each other\n              // and they are both at maximum value\n              // but only if focused from outside.\n              if (model.value[0] === model.value[1] && model.value[0] === max.value && e.relatedTarget !== startThumbRef.value?.$el) {\n                stopThumbRef.value?.$el.blur();\n                startThumbRef.value?.$el.focus();\n              }\n            },\n            \"onBlur\": () => {\n              blur();\n              activeThumbRef.value = undefined;\n            },\n            \"min\": model.value[0],\n            \"max\": max.value,\n            \"position\": trackStop.value,\n            \"ripple\": props.ripple\n          }, {\n            'thumb-label': slots['thumb-label']\n          })]);\n        }\n      });\n    });\n    return {};\n  }\n});\n//# sourceMappingURL=VRangeSlider.mjs.map",
      "start": 1731941018955,
      "end": 1731941019133,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941019133,
      "end": 1731941019133,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941019134,
      "end": 1731941019134,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941019134,
      "end": 1731941019135,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941019135,
      "end": 1731941019135,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941019135,
      "end": 1731941019135,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941019135,
      "end": 1731941019135,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941019135,
      "end": 1731941019135,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941019135,
      "end": 1731941019135,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941019135,
      "end": 1731941019135,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941019135,
      "end": 1731941019135,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941019135,
      "end": 1731941019135,
      "order": "normal"
    }
  ]
}
