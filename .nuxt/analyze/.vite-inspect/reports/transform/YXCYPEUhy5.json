{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/vuetify/lib/components/VTextarea/VTextarea.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { vModelText as _vModelText, withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"./VTextarea.css\";\nimport \"../VTextField/VTextField.css\";\n\n// Components\nimport { VCounter } from \"../VCounter/VCounter.mjs\";\nimport { VField } from \"../VField/index.mjs\";\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\"; // Composables\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Directives\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, shallowRef, watch, watchEffect } from 'vue';\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVTextareaProps = propsFactory({\n  autoGrow: Boolean,\n  autofocus: Boolean,\n  counter: [Boolean, Number, String],\n  counterValue: Function,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  noResize: Boolean,\n  rows: {\n    type: [Number, String],\n    default: 5,\n    validator: v => !isNaN(parseFloat(v))\n  },\n  maxRows: {\n    type: [Number, String],\n    validator: v => !isNaN(parseFloat(v))\n  },\n  suffix: String,\n  modelModifiers: Object,\n  ...makeVInputProps(),\n  ...makeVFieldProps()\n}, 'VTextarea');\nexport const VTextarea = genericComponent()({\n  name: 'VTextarea',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: makeVTextareaProps(),\n  emits: {\n    'click:control': e => true,\n    'mousedown:control': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value || '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n    function onIntersect(isIntersecting, entries) {\n      if (!props.autofocus || !isIntersecting) return;\n      entries[0].target?.focus?.();\n    }\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const controlHeight = shallowRef('');\n    const textareaRef = ref();\n    const isActive = computed(() => props.persistentPlaceholder || isFocused.value || props.active);\n    function onFocus() {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus();\n      }\n      if (!isFocused.value) focus();\n    }\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n    function onControlMousedown(e) {\n      emit('mousedown:control', e);\n    }\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = '';\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n    function onInput(e) {\n      const el = e.target;\n      model.value = el.value;\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd];\n        nextTick(() => {\n          el.selectionStart = caretPosition[0];\n          el.selectionEnd = caretPosition[1];\n        });\n      }\n    }\n    const sizerRef = ref();\n    const rows = ref(+props.rows);\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant));\n    watchEffect(() => {\n      if (!props.autoGrow) rows.value = +props.rows;\n    });\n    function calculateInputHeight() {\n      if (!props.autoGrow) return;\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return;\n        const style = getComputedStyle(sizerRef.value);\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el);\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) + parseFloat(style.getPropertyValue('--v-input-padding-top')) + parseFloat(style.getPropertyValue('--v-field-padding-bottom'));\n        const height = sizerRef.value.scrollHeight;\n        const lineHeight = parseFloat(style.lineHeight);\n        const minHeight = Math.max(parseFloat(props.rows) * lineHeight + padding, parseFloat(fieldStyle.getPropertyValue('--v-input-control-height')));\n        const maxHeight = parseFloat(props.maxRows) * lineHeight + padding || Infinity;\n        const newHeight = clamp(height ?? 0, minHeight, maxHeight);\n        rows.value = Math.floor((newHeight - padding) / lineHeight);\n        controlHeight.value = convertToUnit(newHeight);\n      });\n    }\n    onMounted(calculateInputHeight);\n    watch(model, calculateInputHeight);\n    watch(() => props.rows, calculateInputHeight);\n    watch(() => props.maxRows, calculateInputHeight);\n    watch(() => props.density, calculateInputHeight);\n    let observer;\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight);\n        observer.observe(sizerRef.value);\n      } else {\n        observer?.disconnect();\n      }\n    });\n    onBeforeUnmount(() => {\n      observer?.disconnect();\n    });\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const {\n        modelValue: _,\n        ...inputProps\n      } = VInput.filterProps(props);\n      const fieldProps = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-textarea v-text-field', {\n          'v-textarea--prefixed': props.prefix,\n          'v-textarea--suffixed': props.suffix,\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-textarea--auto-grow': props.autoGrow,\n          'v-textarea--no-resize': props.noResize || props.autoGrow,\n          'v-input--plain-underlined': isPlainOrUnderlined.value\n        }, props.class],\n        \"style\": props.style\n      }, rootAttrs, inputProps, {\n        \"centerAffix\": rows.value === 1 && !isPlainOrUnderlined.value,\n        \"focused\": isFocused.value\n      }), {\n        ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"style\": {\n              '--v-textarea-control-height': controlHeight.value\n            },\n            \"onClick\": onControlClick,\n            \"onMousedown\": onControlMousedown,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner']\n          }, fieldProps, {\n            \"id\": id.value,\n            \"active\": isActive.value || isDirty.value,\n            \"centerAffix\": rows.value === 1 && !isPlainOrUnderlined.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"disabled\": isDisabled.value,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), {\n            ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), _withDirectives(_createVNode(\"textarea\", _mergeProps({\n                \"ref\": textareaRef,\n                \"class\": fieldClass,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"placeholder\": props.placeholder,\n                \"rows\": props.rows,\n                \"name\": props.name,\n                \"onFocus\": onFocus,\n                \"onBlur\": blur\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]), props.autoGrow && _withDirectives(_createVNode(\"textarea\", {\n                \"class\": [fieldClass, 'v-textarea__sizer'],\n                \"id\": `${slotProps.id}-sizer`,\n                \"onUpdate:modelValue\": $event => model.value = $event,\n                \"ref\": sizerRef,\n                \"readonly\": true,\n                \"aria-hidden\": \"true\"\n              }, null), [[_vModelText, model.value]]), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => _createVNode(_Fragment, null, [slots.details?.(slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": props.persistentCounter || isFocused.value,\n          \"value\": counterValue.value,\n          \"max\": max.value\n        }, slots.counter)])]) : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef);\n  }\n});\n//# sourceMappingURL=VTextarea.mjs.map",
      "start": 1731941019141,
      "end": 1731941019347,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941019347,
      "end": 1731941019347,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941019347,
      "end": 1731941019347,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941019347,
      "end": 1731941019348,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941019348,
      "end": 1731941019348,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941019348,
      "end": 1731941019349,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941019349,
      "end": 1731941019349,
      "order": "normal"
    }
  ]
}
