{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/vuetify/lib/components/VSlider/slider.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* eslint-disable max-statements */\n// Composables\nimport { makeElevationProps } from \"../../composables/elevation.mjs\";\nimport { useRtl } from \"../../composables/locale.mjs\";\nimport { makeRoundedProps } from \"../../composables/rounded.mjs\"; // Utilities\nimport { computed, provide, ref, shallowRef, toRef } from 'vue';\nimport { clamp, createRange, getDecimals, propsFactory } from \"../../util/index.mjs\"; // Types\nexport const VSliderSymbol = Symbol.for('vuetify:v-slider');\nexport function getOffset(e, el, direction) {\n  const vertical = direction === 'vertical';\n  const rect = el.getBoundingClientRect();\n  const touch = 'touches' in e ? e.touches[0] : e;\n  return vertical ? touch.clientY - (rect.top + rect.height / 2) : touch.clientX - (rect.left + rect.width / 2);\n}\nfunction getPosition(e, position) {\n  if ('touches' in e && e.touches.length) return e.touches[0][position];else if ('changedTouches' in e && e.changedTouches.length) return e.changedTouches[0][position];else return e[position];\n}\nexport const makeSliderProps = propsFactory({\n  disabled: {\n    type: Boolean,\n    default: null\n  },\n  error: Boolean,\n  readonly: {\n    type: Boolean,\n    default: null\n  },\n  max: {\n    type: [Number, String],\n    default: 100\n  },\n  min: {\n    type: [Number, String],\n    default: 0\n  },\n  step: {\n    type: [Number, String],\n    default: 0\n  },\n  thumbColor: String,\n  thumbLabel: {\n    type: [Boolean, String],\n    default: undefined,\n    validator: v => typeof v === 'boolean' || v === 'always'\n  },\n  thumbSize: {\n    type: [Number, String],\n    default: 20\n  },\n  showTicks: {\n    type: [Boolean, String],\n    default: false,\n    validator: v => typeof v === 'boolean' || v === 'always'\n  },\n  ticks: {\n    type: [Array, Object]\n  },\n  tickSize: {\n    type: [Number, String],\n    default: 2\n  },\n  color: String,\n  trackColor: String,\n  trackFillColor: String,\n  trackSize: {\n    type: [Number, String],\n    default: 4\n  },\n  direction: {\n    type: String,\n    default: 'horizontal',\n    validator: v => ['vertical', 'horizontal'].includes(v)\n  },\n  reverse: Boolean,\n  ...makeRoundedProps(),\n  ...makeElevationProps({\n    elevation: 2\n  }),\n  ripple: {\n    type: Boolean,\n    default: true\n  }\n}, 'Slider');\nexport const useSteps = props => {\n  const min = computed(() => parseFloat(props.min));\n  const max = computed(() => parseFloat(props.max));\n  const step = computed(() => +props.step > 0 ? parseFloat(props.step) : 0);\n  const decimals = computed(() => Math.max(getDecimals(step.value), getDecimals(min.value)));\n  function roundValue(value) {\n    value = parseFloat(value);\n    if (step.value <= 0) return value;\n    const clamped = clamp(value, min.value, max.value);\n    const offset = min.value % step.value;\n    const newValue = Math.round((clamped - offset) / step.value) * step.value + offset;\n    return parseFloat(Math.min(newValue, max.value).toFixed(decimals.value));\n  }\n  return {\n    min,\n    max,\n    step,\n    decimals,\n    roundValue\n  };\n};\nexport const useSlider = _ref => {\n  let {\n    props,\n    steps,\n    onSliderStart,\n    onSliderMove,\n    onSliderEnd,\n    getActiveThumb\n  } = _ref;\n  const {\n    isRtl\n  } = useRtl();\n  const isReversed = toRef(props, 'reverse');\n  const vertical = computed(() => props.direction === 'vertical');\n  const indexFromEnd = computed(() => vertical.value !== isReversed.value);\n  const {\n    min,\n    max,\n    step,\n    decimals,\n    roundValue\n  } = steps;\n  const thumbSize = computed(() => parseInt(props.thumbSize, 10));\n  const tickSize = computed(() => parseInt(props.tickSize, 10));\n  const trackSize = computed(() => parseInt(props.trackSize, 10));\n  const numTicks = computed(() => (max.value - min.value) / step.value);\n  const disabled = toRef(props, 'disabled');\n  const thumbColor = computed(() => props.error || props.disabled ? undefined : props.thumbColor ?? props.color);\n  const trackColor = computed(() => props.error || props.disabled ? undefined : props.trackColor ?? props.color);\n  const trackFillColor = computed(() => props.error || props.disabled ? undefined : props.trackFillColor ?? props.color);\n  const mousePressed = shallowRef(false);\n  const startOffset = shallowRef(0);\n  const trackContainerRef = ref();\n  const activeThumbRef = ref();\n  function parseMouseMove(e) {\n    const vertical = props.direction === 'vertical';\n    const start = vertical ? 'top' : 'left';\n    const length = vertical ? 'height' : 'width';\n    const position = vertical ? 'clientY' : 'clientX';\n    const {\n      [start]: trackStart,\n      [length]: trackLength\n    } = trackContainerRef.value?.$el.getBoundingClientRect();\n    const clickOffset = getPosition(e, position);\n\n    // It is possible for left to be NaN, force to number\n    let clickPos = Math.min(Math.max((clickOffset - trackStart - startOffset.value) / trackLength, 0), 1) || 0;\n    if (vertical ? indexFromEnd.value : indexFromEnd.value !== isRtl.value) clickPos = 1 - clickPos;\n    return roundValue(min.value + clickPos * (max.value - min.value));\n  }\n  const handleStop = e => {\n    onSliderEnd({\n      value: parseMouseMove(e)\n    });\n    mousePressed.value = false;\n    startOffset.value = 0;\n  };\n  const handleStart = e => {\n    activeThumbRef.value = getActiveThumb(e);\n    if (!activeThumbRef.value) return;\n    activeThumbRef.value.focus();\n    mousePressed.value = true;\n    if (activeThumbRef.value.contains(e.target)) {\n      startOffset.value = getOffset(e, activeThumbRef.value, props.direction);\n    } else {\n      startOffset.value = 0;\n      onSliderMove({\n        value: parseMouseMove(e)\n      });\n    }\n    onSliderStart({\n      value: parseMouseMove(e)\n    });\n  };\n  const moveListenerOptions = {\n    passive: true,\n    capture: true\n  };\n  function onMouseMove(e) {\n    onSliderMove({\n      value: parseMouseMove(e)\n    });\n  }\n  function onSliderMouseUp(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    handleStop(e);\n    window.removeEventListener('mousemove', onMouseMove, moveListenerOptions);\n    window.removeEventListener('mouseup', onSliderMouseUp);\n  }\n  function onSliderTouchend(e) {\n    handleStop(e);\n    window.removeEventListener('touchmove', onMouseMove, moveListenerOptions);\n    e.target?.removeEventListener('touchend', onSliderTouchend);\n  }\n  function onSliderTouchstart(e) {\n    handleStart(e);\n    window.addEventListener('touchmove', onMouseMove, moveListenerOptions);\n    e.target?.addEventListener('touchend', onSliderTouchend, {\n      passive: false\n    });\n  }\n  function onSliderMousedown(e) {\n    e.preventDefault();\n    handleStart(e);\n    window.addEventListener('mousemove', onMouseMove, moveListenerOptions);\n    window.addEventListener('mouseup', onSliderMouseUp, {\n      passive: false\n    });\n  }\n  const position = val => {\n    const percentage = (val - min.value) / (max.value - min.value) * 100;\n    return clamp(isNaN(percentage) ? 0 : percentage, 0, 100);\n  };\n  const showTicks = toRef(props, 'showTicks');\n  const parsedTicks = computed(() => {\n    if (!showTicks.value) return [];\n    if (!props.ticks) {\n      return numTicks.value !== Infinity ? createRange(numTicks.value + 1).map(t => {\n        const value = min.value + t * step.value;\n        return {\n          value,\n          position: position(value)\n        };\n      }) : [];\n    }\n    if (Array.isArray(props.ticks)) return props.ticks.map(t => ({\n      value: t,\n      position: position(t),\n      label: t.toString()\n    }));\n    return Object.keys(props.ticks).map(key => ({\n      value: parseFloat(key),\n      position: position(parseFloat(key)),\n      label: props.ticks[key]\n    }));\n  });\n  const hasLabels = computed(() => parsedTicks.value.some(_ref2 => {\n    let {\n      label\n    } = _ref2;\n    return !!label;\n  }));\n  const data = {\n    activeThumbRef,\n    color: toRef(props, 'color'),\n    decimals,\n    disabled,\n    direction: toRef(props, 'direction'),\n    elevation: toRef(props, 'elevation'),\n    hasLabels,\n    isReversed,\n    indexFromEnd,\n    min,\n    max,\n    mousePressed,\n    numTicks,\n    onSliderMousedown,\n    onSliderTouchstart,\n    parsedTicks,\n    parseMouseMove,\n    position,\n    readonly: toRef(props, 'readonly'),\n    rounded: toRef(props, 'rounded'),\n    roundValue,\n    showTicks,\n    startOffset,\n    step,\n    thumbSize,\n    thumbColor,\n    thumbLabel: toRef(props, 'thumbLabel'),\n    ticks: toRef(props, 'ticks'),\n    tickSize,\n    trackColor,\n    trackContainerRef,\n    trackFillColor,\n    trackSize,\n    vertical\n  };\n  provide(VSliderSymbol, data);\n  return data;\n};\n//# sourceMappingURL=slider.mjs.map",
      "start": 1731941021745,
      "end": 1731941021962,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941021962,
      "end": 1731941021962,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941021963,
      "end": 1731941021963,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941021963,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941021964,
      "end": 1731941021964,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941021964,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941021965,
      "end": 1731941021965,
      "order": "normal"
    }
  ]
}
