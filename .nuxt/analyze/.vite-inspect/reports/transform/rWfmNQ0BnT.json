{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/@primeuix/utils/object/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\n\n// src/object/methods/isEmpty.ts\nfunction isEmpty(value) {\n  return value === null || value === void 0 || value === \"\" || Array.isArray(value) && value.length === 0 || !(value instanceof Date) && typeof value === \"object\" && Object.keys(value).length === 0;\n}\n\n// src/object/methods/compare.ts\nfunction compare(value1, value2, comparator, order = 1) {\n  let result = -1;\n  const emptyValue1 = isEmpty(value1);\n  const emptyValue2 = isEmpty(value2);\n  if (emptyValue1 && emptyValue2) result = 0;\n  else if (emptyValue1) result = order;\n  else if (emptyValue2) result = -order;\n  else if (typeof value1 === \"string\" && typeof value2 === \"string\") result = comparator(value1, value2);\n  else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n  return result;\n}\n\n// src/object/methods/deepEquals.ts\nfunction deepEquals(obj1, obj2) {\n  if (obj1 === obj2) return true;\n  if (obj1 && obj2 && typeof obj1 == \"object\" && typeof obj2 == \"object\") {\n    var arrObj1 = Array.isArray(obj1), arrObj2 = Array.isArray(obj2), i, length, key;\n    if (arrObj1 && arrObj2) {\n      length = obj1.length;\n      if (length != obj2.length) return false;\n      for (i = length; i-- !== 0; ) if (!deepEquals(obj1[i], obj2[i])) return false;\n      return true;\n    }\n    if (arrObj1 != arrObj2) return false;\n    var dateObj1 = obj1 instanceof Date, dateObj2 = obj2 instanceof Date;\n    if (dateObj1 != dateObj2) return false;\n    if (dateObj1 && dateObj2) return obj1.getTime() == obj2.getTime();\n    var regexpObj1 = obj1 instanceof RegExp, regexpObj2 = obj2 instanceof RegExp;\n    if (regexpObj1 != regexpObj2) return false;\n    if (regexpObj1 && regexpObj2) return obj1.toString() == obj2.toString();\n    var keys = Object.keys(obj1);\n    length = keys.length;\n    if (length !== Object.keys(obj2).length) return false;\n    for (i = length; i-- !== 0; ) if (!Object.prototype.hasOwnProperty.call(obj2, keys[i])) return false;\n    for (i = length; i-- !== 0; ) {\n      key = keys[i];\n      if (!deepEquals(obj1[key], obj2[key])) return false;\n    }\n    return true;\n  }\n  return obj1 !== obj1 && obj2 !== obj2;\n}\n\n// src/object/methods/isFunction.ts\nfunction isFunction(value) {\n  return !!(value && value.constructor && value.call && value.apply);\n}\n\n// src/object/methods/isNotEmpty.ts\nfunction isNotEmpty(value) {\n  return !isEmpty(value);\n}\n\n// src/object/methods/resolveFieldData.ts\nfunction resolveFieldData(data, field) {\n  if (!data || !field) {\n    return null;\n  }\n  try {\n    const value = data[field];\n    if (isNotEmpty(value)) return value;\n  } catch (e) {\n  }\n  if (Object.keys(data).length) {\n    if (isFunction(field)) {\n      return field(data);\n    } else if (field.indexOf(\".\") === -1) {\n      return data[field];\n    } else {\n      let fields = field.split(\".\");\n      let value = data;\n      for (let i = 0, len = fields.length; i < len; ++i) {\n        if (value == null) {\n          return null;\n        }\n        value = value[fields[i]];\n      }\n      return value;\n    }\n  }\n  return null;\n}\n\n// src/object/methods/equals.ts\nfunction equals(obj1, obj2, field) {\n  if (field) return resolveFieldData(obj1, field) === resolveFieldData(obj2, field);\n  else return deepEquals(obj1, obj2);\n}\n\n// src/object/methods/contains.ts\nfunction contains(value, list) {\n  if (value != null && list && list.length) {\n    for (let val of list) {\n      if (equals(value, val)) return true;\n    }\n  }\n  return false;\n}\n\n// src/object/methods/filter.ts\nfunction filter(value, fields, filterValue) {\n  let filteredItems = [];\n  if (value) {\n    for (let item of value) {\n      for (let field of fields) {\n        if (String(resolveFieldData(item, field)).toLowerCase().indexOf(filterValue.toLowerCase()) > -1) {\n          filteredItems.push(item);\n          break;\n        }\n      }\n    }\n  }\n  return filteredItems;\n}\n\n// src/object/methods/findIndexInList.ts\nfunction findIndexInList(value, list) {\n  let index = -1;\n  if (list) {\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] === value) {\n        index = i;\n        break;\n      }\n    }\n  }\n  return index;\n}\n\n// src/object/methods/findLast.ts\nfunction findLast(arr, callback) {\n  let item;\n  if (isNotEmpty(arr)) {\n    try {\n      item = arr.findLast(callback);\n    } catch (e) {\n      item = [...arr].reverse().find(callback);\n    }\n  }\n  return item;\n}\n\n// src/object/methods/findLastIndex.ts\nfunction findLastIndex(arr, callback) {\n  let index = -1;\n  if (isNotEmpty(arr)) {\n    try {\n      index = arr.findLastIndex(callback);\n    } catch (e) {\n      index = arr.lastIndexOf([...arr].reverse().find(callback));\n    }\n  }\n  return index;\n}\n\n// src/object/methods/isObject.ts\nfunction isObject(value, empty = true) {\n  return value instanceof Object && value.constructor === Object && (empty || Object.keys(value).length !== 0);\n}\n\n// src/object/methods/resolve.ts\nfunction resolve(obj, ...params) {\n  return isFunction(obj) ? obj(...params) : obj;\n}\n\n// src/object/methods/isString.ts\nfunction isString(value, empty = true) {\n  return typeof value === \"string\" && (empty || value !== \"\");\n}\n\n// src/object/methods/toFlatCase.ts\nfunction toFlatCase(str) {\n  return isString(str) ? str.replace(/(-|_)/g, \"\").toLowerCase() : str;\n}\n\n// src/object/methods/getKeyValue.ts\nfunction getKeyValue(obj, key = \"\", params = {}) {\n  const fKeys = toFlatCase(key).split(\".\");\n  const fKey = fKeys.shift();\n  return fKey ? isObject(obj) ? getKeyValue(resolve(obj[Object.keys(obj).find((k) => toFlatCase(k) === fKey) || \"\"], params), fKeys.join(\".\"), params) : void 0 : resolve(obj, params);\n}\n\n// src/object/methods/insertIntoOrderedArray.ts\nfunction insertIntoOrderedArray(item, index, arr, sourceArr) {\n  if (arr.length > 0) {\n    let injected = false;\n    for (let i = 0; i < arr.length; i++) {\n      let currentItemIndex = findIndexInList(arr[i], sourceArr);\n      if (currentItemIndex > index) {\n        arr.splice(i, 0, item);\n        injected = true;\n        break;\n      }\n    }\n    if (!injected) {\n      arr.push(item);\n    }\n  } else {\n    arr.push(item);\n  }\n}\n\n// src/object/methods/isArray.ts\nfunction isArray(value, empty = true) {\n  return Array.isArray(value) && (empty || value.length !== 0);\n}\n\n// src/object/methods/isDate.ts\nfunction isDate(value) {\n  return value instanceof Date && value.constructor === Date;\n}\n\n// src/object/methods/isNumber.ts\nfunction isNumber(value) {\n  return isNotEmpty(value) && !isNaN(value);\n}\n\n// src/object/methods/isPrintableCharacter.ts\nfunction isPrintableCharacter(char = \"\") {\n  return isNotEmpty(char) && char.length === 1 && !!char.match(/\\S| /);\n}\n\n// src/object/methods/localeComparator.ts\nfunction localeComparator() {\n  return new Intl.Collator(void 0, { numeric: true }).compare;\n}\n\n// src/object/methods/matchRegex.ts\nfunction matchRegex(str, regex) {\n  if (regex) {\n    const match = regex.test(str);\n    regex.lastIndex = 0;\n    return match;\n  }\n  return false;\n}\n\n// src/object/methods/mergeKeys.ts\nfunction mergeKeys(...args) {\n  const _mergeKeys = (target = {}, source = {}) => {\n    const mergedObj = __spreadValues({}, target);\n    Object.keys(source).forEach((key) => {\n      if (isObject(source[key]) && key in target && isObject(target[key])) {\n        mergedObj[key] = _mergeKeys(target[key], source[key]);\n      } else {\n        mergedObj[key] = source[key];\n      }\n    });\n    return mergedObj;\n  };\n  return args.reduce((acc, obj, i) => i === 0 ? obj : _mergeKeys(acc, obj), {});\n}\n\n// src/object/methods/minifyCSS.ts\nfunction minifyCSS(css) {\n  return css ? css.replace(/\\/\\*(?:(?!\\*\\/)[\\s\\S])*\\*\\/|[\\r\\n\\t]+/g, \"\").replace(/ {2,}/g, \" \").replace(/ ([{:}]) /g, \"$1\").replace(/([;,]) /g, \"$1\").replace(/ !/g, \"!\").replace(/: /g, \":\") : css;\n}\n\n// src/object/methods/nestedKeys.ts\nfunction nestedKeys(obj = {}, parentKey = \"\") {\n  return Object.entries(obj).reduce((o, [key, value]) => {\n    const currentKey = parentKey ? `${parentKey}.${key}` : key;\n    isObject(value) ? o = o.concat(nestedKeys(value, currentKey)) : o.push(currentKey);\n    return o;\n  }, []);\n}\n\n// src/object/methods/removeAccents.ts\nfunction removeAccents(str) {\n  if (str && str.search(/[\\xC0-\\xFF]/g) > -1) {\n    str = str.replace(/[\\xC0-\\xC5]/g, \"A\").replace(/[\\xC6]/g, \"AE\").replace(/[\\xC7]/g, \"C\").replace(/[\\xC8-\\xCB]/g, \"E\").replace(/[\\xCC-\\xCF]/g, \"I\").replace(/[\\xD0]/g, \"D\").replace(/[\\xD1]/g, \"N\").replace(/[\\xD2-\\xD6\\xD8]/g, \"O\").replace(/[\\xD9-\\xDC]/g, \"U\").replace(/[\\xDD]/g, \"Y\").replace(/[\\xDE]/g, \"P\").replace(/[\\xE0-\\xE5]/g, \"a\").replace(/[\\xE6]/g, \"ae\").replace(/[\\xE7]/g, \"c\").replace(/[\\xE8-\\xEB]/g, \"e\").replace(/[\\xEC-\\xEF]/g, \"i\").replace(/[\\xF1]/g, \"n\").replace(/[\\xF2-\\xF6\\xF8]/g, \"o\").replace(/[\\xF9-\\xFC]/g, \"u\").replace(/[\\xFE]/g, \"p\").replace(/[\\xFD\\xFF]/g, \"y\");\n  }\n  return str;\n}\n\n// src/object/methods/reorderArray.ts\nfunction reorderArray(value, from, to) {\n  if (value && from !== to) {\n    if (to >= value.length) {\n      to %= value.length;\n      from %= value.length;\n    }\n    value.splice(to, 0, value.splice(from, 1)[0]);\n  }\n}\n\n// src/object/methods/sort.ts\nfunction sort(value1, value2, order = 1, comparator, nullSortOrder = 1) {\n  const result = compare(value1, value2, comparator, order);\n  let finalSortOrder = order;\n  if (isEmpty(value1) || isEmpty(value2)) {\n    finalSortOrder = nullSortOrder === 1 ? order : nullSortOrder;\n  }\n  return finalSortOrder * result;\n}\n\n// src/object/methods/stringify.ts\nfunction stringify(value, indent = 2, currentIndent = 0) {\n  const currentIndentStr = \" \".repeat(currentIndent);\n  const nextIndentStr = \" \".repeat(currentIndent + indent);\n  if (isArray(value)) {\n    return \"[\" + value.map((v) => stringify(v, indent, currentIndent + indent)).join(\", \") + \"]\";\n  } else if (isDate(value)) {\n    return value.toISOString();\n  } else if (isFunction(value)) {\n    return value.toString();\n  } else if (isObject(value)) {\n    return \"{\\n\" + Object.entries(value).map(([k, v]) => `${nextIndentStr}${k}: ${stringify(v, indent, currentIndent + indent)}`).join(\",\\n\") + `\n${currentIndentStr}}`;\n  } else {\n    return JSON.stringify(value);\n  }\n}\n\n// src/object/methods/toCapitalCase.ts\nfunction toCapitalCase(str) {\n  return isString(str, false) ? str[0].toUpperCase() + str.slice(1) : str;\n}\n\n// src/object/methods/toKebabCase.ts\nfunction toKebabCase(str) {\n  return isString(str) ? str.replace(/(_)/g, \"-\").replace(/[A-Z]/g, (c, i) => i === 0 ? c : \"-\" + c.toLowerCase()).toLowerCase() : str;\n}\n\n// src/object/methods/toTokenKey.ts\nfunction toTokenKey(str) {\n  return isString(str) ? str.replace(/[A-Z]/g, (c, i) => i === 0 ? c : \".\" + c.toLowerCase()).toLowerCase() : str;\n}\nexport {\n  compare,\n  contains,\n  deepEquals,\n  equals,\n  filter,\n  findIndexInList,\n  findLast,\n  findLastIndex,\n  getKeyValue,\n  insertIntoOrderedArray,\n  isArray,\n  isDate,\n  isEmpty,\n  isFunction,\n  isNotEmpty,\n  isNumber,\n  isObject,\n  isPrintableCharacter,\n  isString,\n  localeComparator,\n  matchRegex,\n  mergeKeys,\n  minifyCSS,\n  nestedKeys,\n  removeAccents,\n  reorderArray,\n  resolve,\n  resolveFieldData,\n  sort,\n  stringify,\n  toCapitalCase,\n  toFlatCase,\n  toKebabCase,\n  toTokenKey\n};\n//# sourceMappingURL=index.mjs.map",
      "start": 1731941019712,
      "end": 1731941019866,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941019866,
      "end": 1731941019866,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941019866,
      "end": 1731941019866,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941019866,
      "end": 1731941019866,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941019866,
      "end": 1731941019866,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941019866,
      "end": 1731941019866,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941019867,
      "end": 1731941019867,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941019867,
      "end": 1731941019867,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941019867,
      "end": 1731941019867,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941019867,
      "end": 1731941019867,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941019867,
      "end": 1731941019867,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019867,
      "end": 1731941019867,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941019867,
      "end": 1731941019867,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941019868,
      "end": 1731941019868,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941019868,
      "end": 1731941019868,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941019869,
      "end": 1731941019869,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941019869,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941019870,
      "end": 1731941019870,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941019871,
      "end": 1731941019871,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941019871,
      "end": 1731941019871,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941019871,
      "end": 1731941019871,
      "order": "normal"
    }
  ]
}
