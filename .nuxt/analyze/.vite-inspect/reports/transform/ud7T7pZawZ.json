{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/cookie-es/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function parse(str, options) {\n  if (typeof str !== \"string\") {\n    throw new TypeError(\"argument str must be a string\");\n  }\n  const obj = {};\n  const opt = options || {};\n  const dec = opt.decode || decode;\n  let index = 0;\n  while (index < str.length) {\n    const eqIdx = str.indexOf(\"=\", index);\n    if (eqIdx === -1) {\n      break;\n    }\n    let endIdx = str.indexOf(\";\", index);\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n      continue;\n    }\n    const key = str.slice(index, eqIdx).trim();\n    if (opt?.filter && !opt?.filter(key)) {\n      index = endIdx + 1;\n      continue;\n    }\n    if (void 0 === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n      if (val.codePointAt(0) === 34) {\n        val = val.slice(1, -1);\n      }\n      obj[key] = tryDecode(val, dec);\n    }\n    index = endIdx + 1;\n  }\n  return obj;\n}\nfunction decode(str) {\n  return str.includes(\"%\") ? decodeURIComponent(str) : str;\n}\nfunction tryDecode(str, decode2) {\n  try {\n    return decode2(str);\n  } catch {\n    return str;\n  }\n}\n\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007E\\u0080-\\u00FF]+$/;\nfunction serialize(name, value, options) {\n  const opt = options || {};\n  const enc = opt.encode || encodeURIComponent;\n  if (typeof enc !== \"function\") {\n    throw new TypeError(\"option encode is invalid\");\n  }\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError(\"argument name is invalid\");\n  }\n  const encodedValue = enc(value);\n  if (encodedValue && !fieldContentRegExp.test(encodedValue)) {\n    throw new TypeError(\"argument val is invalid\");\n  }\n  let str = name + \"=\" + encodedValue;\n  if (void 0 !== opt.maxAge && opt.maxAge !== null) {\n    const maxAge = opt.maxAge - 0;\n    if (Number.isNaN(maxAge) || !Number.isFinite(maxAge)) {\n      throw new TypeError(\"option maxAge is invalid\");\n    }\n    str += \"; Max-Age=\" + Math.floor(maxAge);\n  }\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError(\"option domain is invalid\");\n    }\n    str += \"; Domain=\" + opt.domain;\n  }\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError(\"option path is invalid\");\n    }\n    str += \"; Path=\" + opt.path;\n  }\n  if (opt.expires) {\n    if (!isDate(opt.expires) || Number.isNaN(opt.expires.valueOf())) {\n      throw new TypeError(\"option expires is invalid\");\n    }\n    str += \"; Expires=\" + opt.expires.toUTCString();\n  }\n  if (opt.httpOnly) {\n    str += \"; HttpOnly\";\n  }\n  if (opt.secure) {\n    str += \"; Secure\";\n  }\n  if (opt.priority) {\n    const priority = typeof opt.priority === \"string\" ? opt.priority.toLowerCase() : opt.priority;\n    switch (priority) {\n      case \"low\": {\n        str += \"; Priority=Low\";\n        break;\n      }\n      case \"medium\": {\n        str += \"; Priority=Medium\";\n        break;\n      }\n      case \"high\": {\n        str += \"; Priority=High\";\n        break;\n      }\n      default: {\n        throw new TypeError(\"option priority is invalid\");\n      }\n    }\n  }\n  if (opt.sameSite) {\n    const sameSite = typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n    switch (sameSite) {\n      case true: {\n        str += \"; SameSite=Strict\";\n        break;\n      }\n      case \"lax\": {\n        str += \"; SameSite=Lax\";\n        break;\n      }\n      case \"strict\": {\n        str += \"; SameSite=Strict\";\n        break;\n      }\n      case \"none\": {\n        str += \"; SameSite=None\";\n        break;\n      }\n      default: {\n        throw new TypeError(\"option sameSite is invalid\");\n      }\n    }\n  }\n  if (opt.partitioned) {\n    str += \"; Partitioned\";\n  }\n  return str;\n}\nfunction isDate(val) {\n  return Object.prototype.toString.call(val) === \"[object Date]\" || val instanceof Date;\n}\n\nfunction parseSetCookie(setCookieValue, options) {\n  const parts = (setCookieValue || \"\").split(\";\").filter((str) => typeof str === \"string\" && !!str.trim());\n  const nameValuePairStr = parts.shift() || \"\";\n  const parsed = _parseNameValuePair(nameValuePairStr);\n  const name = parsed.name;\n  let value = parsed.value;\n  try {\n    value = options?.decode === false ? value : (options?.decode || decodeURIComponent)(value);\n  } catch {\n  }\n  const cookie = {\n    name,\n    value\n  };\n  for (const part of parts) {\n    const sides = part.split(\"=\");\n    const partKey = (sides.shift() || \"\").trimStart().toLowerCase();\n    const partValue = sides.join(\"=\");\n    switch (partKey) {\n      case \"expires\": {\n        cookie.expires = new Date(partValue);\n        break;\n      }\n      case \"max-age\": {\n        cookie.maxAge = Number.parseInt(partValue, 10);\n        break;\n      }\n      case \"secure\": {\n        cookie.secure = true;\n        break;\n      }\n      case \"httponly\": {\n        cookie.httpOnly = true;\n        break;\n      }\n      case \"samesite\": {\n        cookie.sameSite = partValue;\n        break;\n      }\n      default: {\n        cookie[partKey] = partValue;\n      }\n    }\n  }\n  return cookie;\n}\nfunction _parseNameValuePair(nameValuePairStr) {\n  let name = \"\";\n  let value = \"\";\n  const nameValueArr = nameValuePairStr.split(\"=\");\n  if (nameValueArr.length > 1) {\n    name = nameValueArr.shift();\n    value = nameValueArr.join(\"=\");\n  } else {\n    value = nameValuePairStr;\n  }\n  return { name, value };\n}\n\nfunction splitSetCookieString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString.flatMap((c) => splitSetCookieString(c));\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n  const cookiesStrings = [];\n  let pos = 0;\n  let start;\n  let ch;\n  let lastComma;\n  let nextStart;\n  let cookiesSeparatorFound;\n  const skipWhitespace = () => {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  };\n  const notSpecialChar = () => {\n    ch = cookiesString.charAt(pos);\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  };\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        lastComma = pos;\n        pos += 1;\n        skipWhitespace();\n        nextStart = pos;\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          cookiesSeparatorFound = true;\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.slice(start, lastComma));\n          start = pos;\n        } else {\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.slice(start, cookiesString.length));\n    }\n  }\n  return cookiesStrings;\n}\n\nexport { parse, parseSetCookie, serialize, splitSetCookieString };\n",
      "start": 1731941013299,
      "end": 1731941014102,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941014103,
      "end": 1731941014103,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941014103,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941014104,
      "end": 1731941014104,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941014104,
      "end": 1731941014105,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941014105,
      "end": 1731941014105,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941014105,
      "end": 1731941014105,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941014105,
      "end": 1731941014105,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941014105,
      "end": 1731941014105,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941014105,
      "end": 1731941014105,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941014105,
      "end": 1731941014105,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941014105,
      "end": 1731941014105,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941014105,
      "end": 1731941014105,
      "order": "normal"
    }
  ]
}
