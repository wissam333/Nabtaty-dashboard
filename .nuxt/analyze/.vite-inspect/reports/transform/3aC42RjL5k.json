{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/vuetify/lib/components/VInfiniteScroll/VInfiniteScroll.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode, createTextVNode as _createTextVNode } from \"vue\";\n// Styles\nimport \"./VInfiniteScroll.css\";\n\n// Components\nimport { VBtn } from \"../VBtn/index.mjs\";\nimport { VProgressCircular } from \"../VProgressCircular/index.mjs\"; // Composables\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { useIntersectionObserver } from \"../../composables/intersectionObserver.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\nimport { computed, nextTick, onMounted, ref, shallowRef, watch } from 'vue';\nimport { convertToUnit, defineComponent, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVInfiniteScrollProps = propsFactory({\n  color: String,\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: v => ['vertical', 'horizontal'].includes(v)\n  },\n  side: {\n    type: String,\n    default: 'end',\n    validator: v => ['start', 'end', 'both'].includes(v)\n  },\n  mode: {\n    type: String,\n    default: 'intersect',\n    validator: v => ['intersect', 'manual'].includes(v)\n  },\n  margin: [Number, String],\n  loadMoreText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.loadMore'\n  },\n  emptyText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.empty'\n  },\n  ...makeDimensionProps(),\n  ...makeTagProps()\n}, 'VInfiniteScroll');\nexport const VInfiniteScrollIntersect = defineComponent({\n  name: 'VInfiniteScrollIntersect',\n  props: {\n    side: {\n      type: String,\n      required: true\n    },\n    rootRef: null,\n    rootMargin: String\n  },\n  emits: {\n    intersect: (side, isIntersecting) => true\n  },\n  setup(props, _ref) {\n    let {\n      emit\n    } = _ref;\n    const {\n      intersectionRef,\n      isIntersecting\n    } = useIntersectionObserver(entries => {}, props.rootMargin ? {\n      rootMargin: props.rootMargin\n    } : undefined);\n    watch(isIntersecting, async val => {\n      emit('intersect', props.side, val);\n    });\n    useRender(() => _createVNode(\"div\", {\n      \"class\": \"v-infinite-scroll-intersect\",\n      \"ref\": intersectionRef\n    }, [_createTextVNode(\"\\xA0\")]));\n    return {};\n  }\n});\nexport const VInfiniteScroll = genericComponent()({\n  name: 'VInfiniteScroll',\n  props: makeVInfiniteScrollProps(),\n  emits: {\n    load: options => true\n  },\n  setup(props, _ref2) {\n    let {\n      slots,\n      emit\n    } = _ref2;\n    const rootEl = ref();\n    const startStatus = shallowRef('ok');\n    const endStatus = shallowRef('ok');\n    const margin = computed(() => convertToUnit(props.margin));\n    const isIntersecting = shallowRef(false);\n    function setScrollAmount(amount) {\n      if (!rootEl.value) return;\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft';\n      rootEl.value[property] = amount;\n    }\n    function getScrollAmount() {\n      if (!rootEl.value) return 0;\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft';\n      return rootEl.value[property];\n    }\n    function getScrollSize() {\n      if (!rootEl.value) return 0;\n      const property = props.direction === 'vertical' ? 'scrollHeight' : 'scrollWidth';\n      return rootEl.value[property];\n    }\n    function getContainerSize() {\n      if (!rootEl.value) return 0;\n      const property = props.direction === 'vertical' ? 'clientHeight' : 'clientWidth';\n      return rootEl.value[property];\n    }\n    onMounted(() => {\n      if (!rootEl.value) return;\n      if (props.side === 'start') {\n        setScrollAmount(getScrollSize());\n      } else if (props.side === 'both') {\n        setScrollAmount(getScrollSize() / 2 - getContainerSize() / 2);\n      }\n    });\n    function setStatus(side, status) {\n      if (side === 'start') {\n        startStatus.value = status;\n      } else if (side === 'end') {\n        endStatus.value = status;\n      }\n    }\n    function getStatus(side) {\n      return side === 'start' ? startStatus.value : endStatus.value;\n    }\n    let previousScrollSize = 0;\n    function handleIntersect(side, _isIntersecting) {\n      isIntersecting.value = _isIntersecting;\n      if (isIntersecting.value) {\n        intersecting(side);\n      }\n    }\n    function intersecting(side) {\n      if (props.mode !== 'manual' && !isIntersecting.value) return;\n      const status = getStatus(side);\n      if (!rootEl.value || status === 'loading') return;\n      previousScrollSize = getScrollSize();\n      setStatus(side, 'loading');\n      function done(status) {\n        setStatus(side, status);\n        nextTick(() => {\n          if (status === 'empty' || status === 'error') return;\n          if (status === 'ok' && side === 'start') {\n            setScrollAmount(getScrollSize() - previousScrollSize + getScrollAmount());\n          }\n          if (props.mode !== 'manual') {\n            nextTick(() => {\n              window.requestAnimationFrame(() => {\n                window.requestAnimationFrame(() => {\n                  window.requestAnimationFrame(() => {\n                    intersecting(side);\n                  });\n                });\n              });\n            });\n          }\n        });\n      }\n      emit('load', {\n        side,\n        done\n      });\n    }\n    const {\n      t\n    } = useLocale();\n    function renderSide(side, status) {\n      if (props.side !== side && props.side !== 'both') return;\n      const onClick = () => intersecting(side);\n      const slotProps = {\n        side,\n        props: {\n          onClick,\n          color: props.color\n        }\n      };\n      if (status === 'error') return slots.error?.(slotProps);\n      if (status === 'empty') return slots.empty?.(slotProps) ?? _createVNode(\"div\", null, [t(props.emptyText)]);\n      if (props.mode === 'manual') {\n        if (status === 'loading') {\n          return slots.loading?.(slotProps) ?? _createVNode(VProgressCircular, {\n            \"indeterminate\": true,\n            \"color\": props.color\n          }, null);\n        }\n        return slots['load-more']?.(slotProps) ?? _createVNode(VBtn, {\n          \"variant\": \"outlined\",\n          \"color\": props.color,\n          \"onClick\": onClick\n        }, {\n          default: () => [t(props.loadMoreText)]\n        });\n      }\n      return slots.loading?.(slotProps) ?? _createVNode(VProgressCircular, {\n        \"indeterminate\": true,\n        \"color\": props.color\n      }, null);\n    }\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    useRender(() => {\n      const Tag = props.tag;\n      const hasStartIntersect = props.side === 'start' || props.side === 'both';\n      const hasEndIntersect = props.side === 'end' || props.side === 'both';\n      const intersectMode = props.mode === 'intersect';\n      return _createVNode(Tag, {\n        \"ref\": rootEl,\n        \"class\": ['v-infinite-scroll', `v-infinite-scroll--${props.direction}`, {\n          'v-infinite-scroll--start': hasStartIntersect,\n          'v-infinite-scroll--end': hasEndIntersect\n        }],\n        \"style\": dimensionStyles.value\n      }, {\n        default: () => [_createVNode(\"div\", {\n          \"class\": \"v-infinite-scroll__side\"\n        }, [renderSide('start', startStatus.value)]), rootEl.value && hasStartIntersect && intersectMode && _createVNode(VInfiniteScrollIntersect, {\n          \"key\": \"start\",\n          \"side\": \"start\",\n          \"onIntersect\": handleIntersect,\n          \"rootRef\": rootEl.value,\n          \"rootMargin\": margin.value\n        }, null), slots.default?.(), rootEl.value && hasEndIntersect && intersectMode && _createVNode(VInfiniteScrollIntersect, {\n          \"key\": \"end\",\n          \"side\": \"end\",\n          \"onIntersect\": handleIntersect,\n          \"rootRef\": rootEl.value,\n          \"rootMargin\": margin.value\n        }, null), _createVNode(\"div\", {\n          \"class\": \"v-infinite-scroll__side\"\n        }, [renderSide('end', endStatus.value)])]\n      });\n    });\n  }\n});\n//# sourceMappingURL=VInfiniteScroll.mjs.map",
      "start": 1731941018605,
      "end": 1731941018815,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941018815,
      "end": 1731941018815,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941018815,
      "end": 1731941018815,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941018815,
      "end": 1731941018815,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941018815,
      "end": 1731941018815,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941018815,
      "end": 1731941018815,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941018815,
      "end": 1731941018815,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941018815,
      "end": 1731941018815,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941018815,
      "end": 1731941018815,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941018816,
      "end": 1731941018816,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941018816,
      "end": 1731941018817,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941018817,
      "end": 1731941018817,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941018817,
      "end": 1731941018818,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941018818,
      "end": 1731941018818,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941018818,
      "end": 1731941018818,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941018818,
      "end": 1731941018818,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941018818,
      "end": 1731941018818,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941018818,
      "end": 1731941018818,
      "order": "normal"
    }
  ]
}
