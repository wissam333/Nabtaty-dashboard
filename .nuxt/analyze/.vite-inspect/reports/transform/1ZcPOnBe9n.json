{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/primevue/select/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { focus, isAndroid, getFirstFocusableElement, getLastFocusableElement, addStyle, relativePosition, getOuterWidth, absolutePosition, isTouchDevice, isVisible, getFocusableElements, findSingle } from '@primeuix/utils/dom';\nimport { resolveFieldData, isPrintableCharacter, isNotEmpty, equals, findLastIndex, isEmpty } from '@primeuix/utils/object';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { FilterService } from '@primevue/core/api';\nimport { UniqueComponentId, ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport BlankIcon from '@primevue/icons/blank';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport TimesIcon from '@primevue/icons/times';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SelectStyle from 'primevue/select/style';\nimport { resolveComponent, resolveDirective, openBlock, createElementBlock, mergeProps, renderSlot, createTextVNode, toDisplayString, normalizeClass, createBlock, resolveDynamicComponent, createCommentVNode, createElementVNode, createVNode, withCtx, Transition, normalizeProps, createSlots, Fragment, renderList, withDirectives } from 'vue';\n\nvar script$1 = {\n  name: 'BaseSelect',\n  \"extends\": BaseComponent,\n  props: {\n    modelValue: null,\n    options: Array,\n    optionLabel: [String, Function],\n    optionValue: [String, Function],\n    optionDisabled: [String, Function],\n    optionGroupLabel: [String, Function],\n    optionGroupChildren: [String, Function],\n    scrollHeight: {\n      type: String,\n      \"default\": '14rem'\n    },\n    filter: Boolean,\n    filterPlaceholder: String,\n    filterLocale: String,\n    filterMatchMode: {\n      type: String,\n      \"default\": 'contains'\n    },\n    filterFields: {\n      type: Array,\n      \"default\": null\n    },\n    editable: Boolean,\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    variant: {\n      type: String,\n      \"default\": null\n    },\n    invalid: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    dataKey: null,\n    showClear: {\n      type: Boolean,\n      \"default\": false\n    },\n    fluid: {\n      type: Boolean,\n      \"default\": null\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    labelId: {\n      type: String,\n      \"default\": null\n    },\n    labelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    labelStyle: {\n      type: Object,\n      \"default\": null\n    },\n    panelClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    overlayStyle: {\n      type: Object,\n      \"default\": null\n    },\n    overlayClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    panelStyle: {\n      type: Object,\n      \"default\": null\n    },\n    appendTo: {\n      type: [String, Object],\n      \"default\": 'body'\n    },\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    clearIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    dropdownIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    filterIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    loadingIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    resetFilterOnHide: {\n      type: Boolean,\n      \"default\": false\n    },\n    resetFilterOnClear: {\n      type: Boolean,\n      \"default\": false\n    },\n    virtualScrollerOptions: {\n      type: Object,\n      \"default\": null\n    },\n    autoOptionFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    autoFilterFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    selectOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    focusOnHover: {\n      type: Boolean,\n      \"default\": true\n    },\n    highlightOnSelect: {\n      type: Boolean,\n      \"default\": true\n    },\n    checkmark: {\n      type: Boolean,\n      \"default\": false\n    },\n    filterMessage: {\n      type: String,\n      \"default\": null\n    },\n    selectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptySelectionMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptyFilterMessage: {\n      type: String,\n      \"default\": null\n    },\n    emptyMessage: {\n      type: String,\n      \"default\": null\n    },\n    tabindex: {\n      type: Number,\n      \"default\": 0\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: SelectStyle,\n  provide: function provide() {\n    return {\n      $pcSelect: this,\n      $parentInstance: this\n    };\n  }\n};\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar script = {\n  name: 'Select',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:modelValue', 'change', 'focus', 'blur', 'before-show', 'before-hide', 'show', 'hide', 'filter'],\n  inject: {\n    $pcFluid: {\n      \"default\": null\n    }\n  },\n  outsideClickListener: null,\n  scrollHandler: null,\n  resizeListener: null,\n  labelClickListener: null,\n  overlay: null,\n  list: null,\n  virtualScroller: null,\n  searchTimeout: null,\n  searchValue: null,\n  isModelValueChanged: false,\n  data: function data() {\n    return {\n      id: this.$attrs.id,\n      clicked: false,\n      focused: false,\n      focusedOptionIndex: -1,\n      filterValue: null,\n      overlayVisible: false\n    };\n  },\n  watch: {\n    '$attrs.id': function $attrsId(newValue) {\n      this.id = newValue || UniqueComponentId();\n    },\n    modelValue: function modelValue() {\n      this.isModelValueChanged = true;\n    },\n    options: function options() {\n      this.autoUpdateModel();\n    }\n  },\n  mounted: function mounted() {\n    this.id = this.id || UniqueComponentId();\n    this.autoUpdateModel();\n    this.bindLabelClickListener();\n  },\n  updated: function updated() {\n    if (this.overlayVisible && this.isModelValueChanged) {\n      this.scrollInView(this.findSelectedOptionIndex());\n    }\n    this.isModelValueChanged = false;\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.unbindOutsideClickListener();\n    this.unbindResizeListener();\n    this.unbindLabelClickListener();\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy();\n      this.scrollHandler = null;\n    }\n    if (this.overlay) {\n      ZIndex.clear(this.overlay);\n      this.overlay = null;\n    }\n  },\n  methods: {\n    getOptionIndex: function getOptionIndex(index, fn) {\n      return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n    },\n    getOptionValue: function getOptionValue(option) {\n      return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n    },\n    getOptionRenderKey: function getOptionRenderKey(option, index) {\n      return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n    },\n    getPTItemOptions: function getPTItemOptions(option, itemOptions, index, key) {\n      return this.ptm(key, {\n        context: {\n          option: option,\n          index: index,\n          selected: this.isSelected(option),\n          focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n          disabled: this.isOptionDisabled(option)\n        }\n      });\n    },\n    isOptionDisabled: function isOptionDisabled(option) {\n      return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n    },\n    isOptionGroup: function isOptionGroup(option) {\n      return this.optionGroupLabel && option.optionGroup && option.group;\n    },\n    getOptionGroupLabel: function getOptionGroupLabel(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupLabel);\n    },\n    getOptionGroupChildren: function getOptionGroupChildren(optionGroup) {\n      return resolveFieldData(optionGroup, this.optionGroupChildren);\n    },\n    getAriaPosInset: function getAriaPosInset(index) {\n      var _this = this;\n      return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter(function (option) {\n        return _this.isOptionGroup(option);\n      }).length : index) + 1;\n    },\n    show: function show(isFocus) {\n      this.$emit('before-show');\n      this.overlayVisible = true;\n      this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex();\n      isFocus && focus(this.$refs.focusInput);\n    },\n    hide: function hide(isFocus) {\n      var _this2 = this;\n      var _hide = function _hide() {\n        _this2.$emit('before-hide');\n        _this2.overlayVisible = false;\n        _this2.clicked = false;\n        _this2.focusedOptionIndex = -1;\n        _this2.searchValue = '';\n        _this2.resetFilterOnHide && (_this2.filterValue = null);\n        isFocus && focus(_this2.$refs.focusInput);\n      };\n      setTimeout(function () {\n        _hide();\n      }, 0); // For ScreenReaders\n    },\n    onFocus: function onFocus(event) {\n      if (this.disabled) {\n        // For ScreenReaders\n        return;\n      }\n      this.focused = true;\n      if (this.overlayVisible) {\n        this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.editable ? -1 : this.findSelectedOptionIndex();\n        this.scrollInView(this.focusedOptionIndex);\n      }\n      this.$emit('focus', event);\n    },\n    onBlur: function onBlur(event) {\n      this.focused = false;\n      this.focusedOptionIndex = -1;\n      this.searchValue = '';\n      this.$emit('blur', event);\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (this.disabled || isAndroid()) {\n        event.preventDefault();\n        return;\n      }\n      var metaKey = event.metaKey || event.ctrlKey;\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event, this.editable);\n          break;\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          this.onArrowLeftKey(event, this.editable);\n          break;\n        case 'Home':\n          this.onHomeKey(event, this.editable);\n          break;\n        case 'End':\n          this.onEndKey(event, this.editable);\n          break;\n        case 'PageDown':\n          this.onPageDownKey(event);\n          break;\n        case 'PageUp':\n          this.onPageUpKey(event);\n          break;\n        case 'Space':\n          this.onSpaceKey(event, this.editable);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event);\n          break;\n        case 'Backspace':\n          this.onBackspaceKey(event, this.editable);\n          break;\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          //NOOP\n          break;\n        default:\n          if (!metaKey && isPrintableCharacter(event.key)) {\n            !this.overlayVisible && this.show();\n            !this.editable && this.searchOptions(event, event.key);\n          }\n          break;\n      }\n      this.clicked = false;\n    },\n    onEditableInput: function onEditableInput(event) {\n      var value = event.target.value;\n      this.searchValue = '';\n      var matched = this.searchOptions(event, value);\n      !matched && (this.focusedOptionIndex = -1);\n      this.updateModel(event, value);\n      !this.overlayVisible && isNotEmpty(value) && this.show();\n    },\n    onContainerClick: function onContainerClick(event) {\n      if (this.disabled || this.loading) {\n        return;\n      }\n      if (event.target.tagName === 'INPUT' || event.target.getAttribute('data-pc-section') === 'clearicon' || event.target.closest('[data-pc-section=\"clearicon\"]')) {\n        return;\n      } else if (!this.overlay || !this.overlay.contains(event.target)) {\n        this.overlayVisible ? this.hide(true) : this.show(true);\n      }\n      this.clicked = true;\n    },\n    onClearClick: function onClearClick(event) {\n      this.updateModel(event, null);\n      this.resetFilterOnClear && (this.filterValue = null);\n    },\n    onFirstHiddenFocus: function onFirstHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      focus(focusableEl);\n    },\n    onLastHiddenFocus: function onLastHiddenFocus(event) {\n      var focusableEl = event.relatedTarget === this.$refs.focusInput ? getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n      focus(focusableEl);\n    },\n    onOptionSelect: function onOptionSelect(event, option) {\n      var isHide = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var value = this.getOptionValue(option);\n      this.updateModel(event, value);\n      isHide && this.hide(true);\n    },\n    onOptionMouseMove: function onOptionMouseMove(event, index) {\n      if (this.focusOnHover) {\n        this.changeFocusedOptionIndex(event, index);\n      }\n    },\n    onFilterChange: function onFilterChange(event) {\n      var value = event.target.value;\n      this.filterValue = value;\n      this.focusedOptionIndex = -1;\n      this.$emit('filter', {\n        originalEvent: event,\n        value: value\n      });\n      !this.virtualScrollerDisabled && this.virtualScroller.scrollToIndex(0);\n    },\n    onFilterKeyDown: function onFilterKeyDown(event) {\n      switch (event.code) {\n        case 'ArrowDown':\n          this.onArrowDownKey(event);\n          break;\n        case 'ArrowUp':\n          this.onArrowUpKey(event, true);\n          break;\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          this.onArrowLeftKey(event, true);\n          break;\n        case 'Home':\n          this.onHomeKey(event, true);\n          break;\n        case 'End':\n          this.onEndKey(event, true);\n          break;\n        case 'Enter':\n        case 'NumpadEnter':\n          this.onEnterKey(event);\n          break;\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n        case 'Tab':\n          this.onTabKey(event, true);\n          break;\n      }\n    },\n    onFilterBlur: function onFilterBlur() {\n      this.focusedOptionIndex = -1;\n    },\n    onFilterUpdated: function onFilterUpdated() {\n      if (this.overlayVisible) {\n        this.alignOverlay();\n      }\n    },\n    onOverlayClick: function onOverlayClick(event) {\n      OverlayEventBus.emit('overlay-click', {\n        originalEvent: event,\n        target: this.$el\n      });\n    },\n    onOverlayKeyDown: function onOverlayKeyDown(event) {\n      switch (event.code) {\n        case 'Escape':\n          this.onEscapeKey(event);\n          break;\n      }\n    },\n    onArrowDownKey: function onArrowDownKey(event) {\n      if (!this.overlayVisible) {\n        this.show();\n        this.editable && this.changeFocusedOptionIndex(event, this.findSelectedOptionIndex());\n      } else {\n        var optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n        this.changeFocusedOptionIndex(event, optionIndex);\n      }\n      event.preventDefault();\n    },\n    onArrowUpKey: function onArrowUpKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (event.altKey && !pressedInInputText) {\n        if (this.focusedOptionIndex !== -1) {\n          this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n        }\n        this.overlayVisible && this.hide();\n        event.preventDefault();\n      } else {\n        var optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n        this.changeFocusedOptionIndex(event, optionIndex);\n        !this.overlayVisible && this.show();\n        event.preventDefault();\n      }\n    },\n    onArrowLeftKey: function onArrowLeftKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      pressedInInputText && (this.focusedOptionIndex = -1);\n    },\n    onHomeKey: function onHomeKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        var target = event.currentTarget;\n        if (event.shiftKey) {\n          target.setSelectionRange(0, event.target.selectionStart);\n        } else {\n          target.setSelectionRange(0, 0);\n          this.focusedOptionIndex = -1;\n        }\n      } else {\n        this.changeFocusedOptionIndex(event, this.findFirstOptionIndex());\n        !this.overlayVisible && this.show();\n      }\n      event.preventDefault();\n    },\n    onEndKey: function onEndKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        var target = event.currentTarget;\n        if (event.shiftKey) {\n          target.setSelectionRange(event.target.selectionStart, target.value.length);\n        } else {\n          var len = target.value.length;\n          target.setSelectionRange(len, len);\n          this.focusedOptionIndex = -1;\n        }\n      } else {\n        this.changeFocusedOptionIndex(event, this.findLastOptionIndex());\n        !this.overlayVisible && this.show();\n      }\n      event.preventDefault();\n    },\n    onPageUpKey: function onPageUpKey(event) {\n      this.scrollInView(0);\n      event.preventDefault();\n    },\n    onPageDownKey: function onPageDownKey(event) {\n      this.scrollInView(this.visibleOptions.length - 1);\n      event.preventDefault();\n    },\n    onEnterKey: function onEnterKey(event) {\n      if (!this.overlayVisible) {\n        this.focusedOptionIndex = -1; // reset\n        this.onArrowDownKey(event);\n      } else {\n        if (this.focusedOptionIndex !== -1) {\n          this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n        }\n        this.hide();\n      }\n      event.preventDefault();\n    },\n    onSpaceKey: function onSpaceKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      !pressedInInputText && this.onEnterKey(event);\n    },\n    onEscapeKey: function onEscapeKey(event) {\n      this.overlayVisible && this.hide(true);\n      event.preventDefault();\n      event.stopPropagation(); //@todo will be changed next versionss\n    },\n    onTabKey: function onTabKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!pressedInInputText) {\n        if (this.overlayVisible && this.hasFocusableElements()) {\n          focus(this.$refs.firstHiddenFocusableElementOnOverlay);\n          event.preventDefault();\n        } else {\n          if (this.focusedOptionIndex !== -1) {\n            this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n          }\n          this.overlayVisible && this.hide(this.filter);\n        }\n      }\n    },\n    onBackspaceKey: function onBackspaceKey(event) {\n      var pressedInInputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (pressedInInputText) {\n        !this.overlayVisible && this.show();\n      }\n    },\n    onOverlayEnter: function onOverlayEnter(el) {\n      ZIndex.set('overlay', el, this.$primevue.config.zIndex.overlay);\n      addStyle(el, {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      });\n      this.alignOverlay();\n      this.scrollInView();\n      this.autoFilterFocus && focus(this.$refs.filterInput.$el);\n    },\n    onOverlayAfterEnter: function onOverlayAfterEnter() {\n      this.bindOutsideClickListener();\n      this.bindScrollListener();\n      this.bindResizeListener();\n      this.$emit('show');\n    },\n    onOverlayLeave: function onOverlayLeave() {\n      this.unbindOutsideClickListener();\n      this.unbindScrollListener();\n      this.unbindResizeListener();\n      this.$emit('hide');\n      this.overlay = null;\n    },\n    onOverlayAfterLeave: function onOverlayAfterLeave(el) {\n      ZIndex.clear(el);\n    },\n    alignOverlay: function alignOverlay() {\n      if (this.appendTo === 'self') {\n        relativePosition(this.overlay, this.$el);\n      } else {\n        this.overlay.style.minWidth = getOuterWidth(this.$el) + 'px';\n        absolutePosition(this.overlay, this.$el);\n      }\n    },\n    bindOutsideClickListener: function bindOutsideClickListener() {\n      var _this3 = this;\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = function (event) {\n          if (_this3.overlayVisible && _this3.overlay && !_this3.$el.contains(event.target) && !_this3.overlay.contains(event.target)) {\n            _this3.hide();\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener: function unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    },\n    bindScrollListener: function bindScrollListener() {\n      var _this4 = this;\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, function () {\n          if (_this4.overlayVisible) {\n            _this4.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    },\n    bindResizeListener: function bindResizeListener() {\n      var _this5 = this;\n      if (!this.resizeListener) {\n        this.resizeListener = function () {\n          if (_this5.overlayVisible && !isTouchDevice()) {\n            _this5.hide();\n          }\n        };\n        window.addEventListener('resize', this.resizeListener);\n      }\n    },\n    unbindResizeListener: function unbindResizeListener() {\n      if (this.resizeListener) {\n        window.removeEventListener('resize', this.resizeListener);\n        this.resizeListener = null;\n      }\n    },\n    bindLabelClickListener: function bindLabelClickListener() {\n      var _this6 = this;\n      if (!this.editable && !this.labelClickListener) {\n        var label = document.querySelector(\"label[for=\\\"\".concat(this.inputId, \"\\\"]\"));\n        if (label && isVisible(label)) {\n          this.labelClickListener = function () {\n            focus(_this6.$refs.focusInput);\n          };\n          label.addEventListener('click', this.labelClickListener);\n        }\n      }\n    },\n    unbindLabelClickListener: function unbindLabelClickListener() {\n      if (this.labelClickListener) {\n        var label = document.querySelector(\"label[for=\\\"\".concat(this.inputId, \"\\\"]\"));\n        if (label && isVisible(label)) {\n          label.removeEventListener('click', this.labelClickListener);\n        }\n      }\n    },\n    hasFocusableElements: function hasFocusableElements() {\n      return getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n    },\n    isOptionMatched: function isOptionMatched(option) {\n      var _this$getOptionLabel;\n      return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && ((_this$getOptionLabel = this.getOptionLabel(option)) === null || _this$getOptionLabel === void 0 ? void 0 : _this$getOptionLabel.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale)));\n    },\n    isValidOption: function isValidOption(option) {\n      return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n    },\n    isValidSelectedOption: function isValidSelectedOption(option) {\n      return this.isValidOption(option) && this.isSelected(option);\n    },\n    isSelected: function isSelected(option) {\n      return this.isValidOption(option) && equals(this.modelValue, this.getOptionValue(option), this.equalityKey);\n    },\n    findFirstOptionIndex: function findFirstOptionIndex() {\n      var _this7 = this;\n      return this.visibleOptions.findIndex(function (option) {\n        return _this7.isValidOption(option);\n      });\n    },\n    findLastOptionIndex: function findLastOptionIndex() {\n      var _this8 = this;\n      return findLastIndex(this.visibleOptions, function (option) {\n        return _this8.isValidOption(option);\n      });\n    },\n    findNextOptionIndex: function findNextOptionIndex(index) {\n      var _this9 = this;\n      var matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex(function (option) {\n        return _this9.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n    },\n    findPrevOptionIndex: function findPrevOptionIndex(index) {\n      var _this10 = this;\n      var matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), function (option) {\n        return _this10.isValidOption(option);\n      }) : -1;\n      return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n    },\n    findSelectedOptionIndex: function findSelectedOptionIndex() {\n      var _this11 = this;\n      return this.hasSelectedOption ? this.visibleOptions.findIndex(function (option) {\n        return _this11.isValidSelectedOption(option);\n      }) : -1;\n    },\n    findFirstFocusedOptionIndex: function findFirstFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n    },\n    findLastFocusedOptionIndex: function findLastFocusedOptionIndex() {\n      var selectedIndex = this.findSelectedOptionIndex();\n      return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n    },\n    searchOptions: function searchOptions(event, _char) {\n      var _this12 = this;\n      this.searchValue = (this.searchValue || '') + _char;\n      var optionIndex = -1;\n      var matched = false;\n      if (isNotEmpty(this.searchValue)) {\n        if (this.focusedOptionIndex !== -1) {\n          optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex(function (option) {\n            return _this12.isOptionMatched(option);\n          });\n          optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex(function (option) {\n            return _this12.isOptionMatched(option);\n          }) : optionIndex + this.focusedOptionIndex;\n        } else {\n          optionIndex = this.visibleOptions.findIndex(function (option) {\n            return _this12.isOptionMatched(option);\n          });\n        }\n        if (optionIndex !== -1) {\n          matched = true;\n        }\n        if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n          optionIndex = this.findFirstFocusedOptionIndex();\n        }\n        if (optionIndex !== -1) {\n          this.changeFocusedOptionIndex(event, optionIndex);\n        }\n      }\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n      this.searchTimeout = setTimeout(function () {\n        _this12.searchValue = '';\n        _this12.searchTimeout = null;\n      }, 500);\n      return matched;\n    },\n    changeFocusedOptionIndex: function changeFocusedOptionIndex(event, index) {\n      if (this.focusedOptionIndex !== index) {\n        this.focusedOptionIndex = index;\n        this.scrollInView();\n        if (this.selectOnFocus) {\n          this.onOptionSelect(event, this.visibleOptions[index], false);\n        }\n      }\n    },\n    scrollInView: function scrollInView() {\n      var _this13 = this;\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      this.$nextTick(function () {\n        var id = index !== -1 ? \"\".concat(_this13.id, \"_\").concat(index) : _this13.focusedOptionId;\n        var element = findSingle(_this13.list, \"li[id=\\\"\".concat(id, \"\\\"]\"));\n        if (element) {\n          element.scrollIntoView && element.scrollIntoView({\n            block: 'nearest',\n            inline: 'start'\n          });\n        } else if (!_this13.virtualScrollerDisabled) {\n          _this13.virtualScroller && _this13.virtualScroller.scrollToIndex(index !== -1 ? index : _this13.focusedOptionIndex);\n        }\n      });\n    },\n    autoUpdateModel: function autoUpdateModel() {\n      if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption) {\n        this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n        this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex], false);\n      }\n    },\n    updateModel: function updateModel(event, value) {\n      this.$emit('update:modelValue', value);\n      this.$emit('change', {\n        originalEvent: event,\n        value: value\n      });\n    },\n    flatOptions: function flatOptions(options) {\n      var _this14 = this;\n      return (options || []).reduce(function (result, option, index) {\n        result.push({\n          optionGroup: option,\n          group: true,\n          index: index\n        });\n        var optionGroupChildren = _this14.getOptionGroupChildren(option);\n        optionGroupChildren && optionGroupChildren.forEach(function (o) {\n          return result.push(o);\n        });\n        return result;\n      }, []);\n    },\n    overlayRef: function overlayRef(el) {\n      this.overlay = el;\n    },\n    listRef: function listRef(el, contentRef) {\n      this.list = el;\n      contentRef && contentRef(el); // For VirtualScroller\n    },\n    virtualScrollerRef: function virtualScrollerRef(el) {\n      this.virtualScroller = el;\n    }\n  },\n  computed: {\n    visibleOptions: function visibleOptions() {\n      var _this15 = this;\n      var options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n      if (this.filterValue) {\n        var filteredOptions = FilterService.filter(options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n        if (this.optionGroupLabel) {\n          var optionGroups = this.options || [];\n          var filtered = [];\n          optionGroups.forEach(function (group) {\n            var groupChildren = _this15.getOptionGroupChildren(group);\n            var filteredItems = groupChildren.filter(function (item) {\n              return filteredOptions.includes(item);\n            });\n            if (filteredItems.length > 0) filtered.push(_objectSpread(_objectSpread({}, group), {}, _defineProperty({}, typeof _this15.optionGroupChildren === 'string' ? _this15.optionGroupChildren : 'items', _toConsumableArray(filteredItems))));\n          });\n          return this.flatOptions(filtered);\n        }\n        return filteredOptions;\n      }\n      return options;\n    },\n    hasSelectedOption: function hasSelectedOption() {\n      return isNotEmpty(this.modelValue);\n    },\n    label: function label() {\n      var selectedOptionIndex = this.findSelectedOptionIndex();\n      return selectedOptionIndex !== -1 ? this.getOptionLabel(this.visibleOptions[selectedOptionIndex]) : this.placeholder || 'p-emptylabel';\n    },\n    editableInputValue: function editableInputValue() {\n      var selectedOptionIndex = this.findSelectedOptionIndex();\n      return selectedOptionIndex !== -1 ? this.getOptionLabel(this.visibleOptions[selectedOptionIndex]) : this.modelValue || '';\n    },\n    equalityKey: function equalityKey() {\n      return this.optionValue ? null : this.dataKey;\n    },\n    searchFields: function searchFields() {\n      return this.filterFields || [this.optionLabel];\n    },\n    filterResultMessageText: function filterResultMessageText() {\n      return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n    },\n    filterMessageText: function filterMessageText() {\n      return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n    },\n    emptyFilterMessageText: function emptyFilterMessageText() {\n      return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n    },\n    emptyMessageText: function emptyMessageText() {\n      return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n    },\n    selectionMessageText: function selectionMessageText() {\n      return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n    },\n    emptySelectionMessageText: function emptySelectionMessageText() {\n      return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n    },\n    selectedMessageText: function selectedMessageText() {\n      return this.hasSelectedOption ? this.selectionMessageText.replaceAll('{0}', '1') : this.emptySelectionMessageText;\n    },\n    focusedOptionId: function focusedOptionId() {\n      return this.focusedOptionIndex !== -1 ? \"\".concat(this.id, \"_\").concat(this.focusedOptionIndex) : null;\n    },\n    ariaSetSize: function ariaSetSize() {\n      var _this16 = this;\n      return this.visibleOptions.filter(function (option) {\n        return !_this16.isOptionGroup(option);\n      }).length;\n    },\n    isClearIconVisible: function isClearIconVisible() {\n      return this.showClear && this.modelValue != null && isNotEmpty(this.options);\n    },\n    virtualScrollerDisabled: function virtualScrollerDisabled() {\n      return !this.virtualScrollerOptions;\n    },\n    hasFluid: function hasFluid() {\n      return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n    }\n  },\n  directives: {\n    ripple: Ripple\n  },\n  components: {\n    InputText: InputText,\n    VirtualScroller: VirtualScroller,\n    Portal: Portal,\n    InputIcon: InputIcon,\n    IconField: IconField,\n    TimesIcon: TimesIcon,\n    ChevronDownIcon: ChevronDownIcon,\n    SpinnerIcon: SpinnerIcon,\n    SearchIcon: SearchIcon,\n    CheckIcon: CheckIcon,\n    BlankIcon: BlankIcon\n  }\n};\n\nvar _hoisted_1 = [\"id\"];\nvar _hoisted_2 = [\"id\", \"value\", \"placeholder\", \"tabindex\", \"disabled\", \"aria-label\", \"aria-labelledby\", \"aria-expanded\", \"aria-controls\", \"aria-activedescendant\", \"aria-invalid\"];\nvar _hoisted_3 = [\"id\", \"tabindex\", \"aria-label\", \"aria-labelledby\", \"aria-expanded\", \"aria-controls\", \"aria-activedescendant\", \"aria-disabled\"];\nvar _hoisted_4 = [\"id\"];\nvar _hoisted_5 = [\"id\"];\nvar _hoisted_6 = [\"id\", \"aria-label\", \"aria-selected\", \"aria-disabled\", \"aria-setsize\", \"aria-posinset\", \"onClick\", \"onMousemove\", \"data-p-selected\", \"data-p-focused\", \"data-p-disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_SpinnerIcon = resolveComponent(\"SpinnerIcon\");\n  var _component_InputText = resolveComponent(\"InputText\");\n  var _component_SearchIcon = resolveComponent(\"SearchIcon\");\n  var _component_InputIcon = resolveComponent(\"InputIcon\");\n  var _component_IconField = resolveComponent(\"IconField\");\n  var _component_CheckIcon = resolveComponent(\"CheckIcon\");\n  var _component_BlankIcon = resolveComponent(\"BlankIcon\");\n  var _component_VirtualScroller = resolveComponent(\"VirtualScroller\");\n  var _component_Portal = resolveComponent(\"Portal\");\n  var _directive_ripple = resolveDirective(\"ripple\");\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"container\",\n    id: $data.id,\n    \"class\": _ctx.cx('root'),\n    onClick: _cache[11] || (_cache[11] = function () {\n      return $options.onContainerClick && $options.onContainerClick.apply($options, arguments);\n    })\n  }, _ctx.ptmi('root')), [_ctx.editable ? (openBlock(), createElementBlock(\"input\", mergeProps({\n    key: 0,\n    ref: \"focusInput\",\n    id: _ctx.labelId || _ctx.inputId,\n    type: \"text\",\n    \"class\": [_ctx.cx('label'), _ctx.inputClass, _ctx.labelClass],\n    style: [_ctx.inputStyle, _ctx.labelStyle],\n    value: $options.editableInputValue,\n    placeholder: _ctx.placeholder,\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    disabled: _ctx.disabled,\n    autocomplete: \"off\",\n    role: \"combobox\",\n    \"aria-label\": _ctx.ariaLabel,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $data.id + '_list',\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    \"aria-invalid\": _ctx.invalid || undefined,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[2] || (_cache[2] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    }),\n    onInput: _cache[3] || (_cache[3] = function () {\n      return $options.onEditableInput && $options.onEditableInput.apply($options, arguments);\n    })\n  }, _ctx.ptm('label')), null, 16, _hoisted_2)) : (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 1,\n    ref: \"focusInput\",\n    id: _ctx.labelId || _ctx.inputId,\n    \"class\": [_ctx.cx('label'), _ctx.inputClass, _ctx.labelClass],\n    style: [_ctx.inputStyle, _ctx.labelStyle],\n    tabindex: !_ctx.disabled ? _ctx.tabindex : -1,\n    role: \"combobox\",\n    \"aria-label\": _ctx.ariaLabel || ($options.label === 'p-emptylabel' ? undefined : $options.label),\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": $data.overlayVisible,\n    \"aria-controls\": $data.id + '_list',\n    \"aria-activedescendant\": $data.focused ? $options.focusedOptionId : undefined,\n    \"aria-disabled\": _ctx.disabled,\n    onFocus: _cache[4] || (_cache[4] = function () {\n      return $options.onFocus && $options.onFocus.apply($options, arguments);\n    }),\n    onBlur: _cache[5] || (_cache[5] = function () {\n      return $options.onBlur && $options.onBlur.apply($options, arguments);\n    }),\n    onKeydown: _cache[6] || (_cache[6] = function () {\n      return $options.onKeyDown && $options.onKeyDown.apply($options, arguments);\n    })\n  }, _ctx.ptm('label')), [renderSlot(_ctx.$slots, \"value\", {\n    value: _ctx.modelValue,\n    placeholder: _ctx.placeholder\n  }, function () {\n    return [createTextVNode(toDisplayString($options.label === 'p-emptylabel' ? ' ' : $options.label || 'empty'), 1)];\n  })], 16, _hoisted_3)), $options.isClearIconVisible ? renderSlot(_ctx.$slots, \"clearicon\", {\n    key: 2,\n    \"class\": normalizeClass(_ctx.cx('clearIcon')),\n    clearCallback: $options.onClearClick\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.clearIcon ? 'i' : 'TimesIcon'), mergeProps({\n      ref: \"clearIcon\",\n      \"class\": [_ctx.cx('clearIcon'), _ctx.clearIcon],\n      onClick: $options.onClearClick\n    }, _ctx.ptm('clearIcon'), {\n      \"data-pc-section\": \"clearicon\"\n    }), null, 16, [\"class\", \"onClick\"]))];\n  }) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n    \"class\": _ctx.cx('dropdown')\n  }, _ctx.ptm('dropdown')), [_ctx.loading ? renderSlot(_ctx.$slots, \"loadingicon\", {\n    key: 0,\n    \"class\": normalizeClass(_ctx.cx('loadingIcon'))\n  }, function () {\n    return [_ctx.loadingIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n      key: 0,\n      \"class\": [_ctx.cx('loadingIcon'), 'pi-spin', _ctx.loadingIcon],\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('loadingIcon')), null, 16)) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({\n      key: 1,\n      \"class\": _ctx.cx('loadingIcon'),\n      spin: \"\",\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('loadingIcon')), null, 16, [\"class\"]))];\n  }) : renderSlot(_ctx.$slots, \"dropdownicon\", {\n    key: 1,\n    \"class\": normalizeClass(_ctx.cx('dropdownIcon'))\n  }, function () {\n    return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.dropdownIcon ? 'span' : 'ChevronDownIcon'), mergeProps({\n      \"class\": [_ctx.cx('dropdownIcon'), _ctx.dropdownIcon],\n      \"aria-hidden\": \"true\"\n    }, _ctx.ptm('dropdownIcon')), null, 16, [\"class\"]))];\n  })], 16), createVNode(_component_Portal, {\n    appendTo: _ctx.appendTo\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(Transition, mergeProps({\n        name: \"p-connected-overlay\",\n        onEnter: $options.onOverlayEnter,\n        onAfterEnter: $options.onOverlayAfterEnter,\n        onLeave: $options.onOverlayLeave,\n        onAfterLeave: $options.onOverlayAfterLeave\n      }, _ctx.ptm('transition')), {\n        \"default\": withCtx(function () {\n          return [$data.overlayVisible ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            ref: $options.overlayRef,\n            \"class\": [_ctx.cx('overlay'), _ctx.panelClass, _ctx.overlayClass],\n            style: [_ctx.panelStyle, _ctx.overlayStyle],\n            onClick: _cache[9] || (_cache[9] = function () {\n              return $options.onOverlayClick && $options.onOverlayClick.apply($options, arguments);\n            }),\n            onKeydown: _cache[10] || (_cache[10] = function () {\n              return $options.onOverlayKeyDown && $options.onOverlayKeyDown.apply($options, arguments);\n            })\n          }, _ctx.ptm('overlay')), [createElementVNode(\"span\", mergeProps({\n            ref: \"firstHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"aria-hidden\": \"true\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[7] || (_cache[7] = function () {\n              return $options.onFirstHiddenFocus && $options.onFirstHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenFirstFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16), renderSlot(_ctx.$slots, \"header\", {\n            value: _ctx.modelValue,\n            options: $options.visibleOptions\n          }), _ctx.filter ? (openBlock(), createElementBlock(\"div\", mergeProps({\n            key: 0,\n            \"class\": _ctx.cx('header')\n          }, _ctx.ptm('header')), [createVNode(_component_IconField, {\n            unstyled: _ctx.unstyled,\n            pt: _ctx.ptm('pcFilterContainer')\n          }, {\n            \"default\": withCtx(function () {\n              return [createVNode(_component_InputText, {\n                ref: \"filterInput\",\n                type: \"text\",\n                value: $data.filterValue,\n                onVnodeMounted: $options.onFilterUpdated,\n                onVnodeUpdated: $options.onFilterUpdated,\n                \"class\": normalizeClass(_ctx.cx('pcFilter')),\n                placeholder: _ctx.filterPlaceholder,\n                variant: _ctx.variant,\n                unstyled: _ctx.unstyled,\n                role: \"searchbox\",\n                autocomplete: \"off\",\n                \"aria-owns\": $data.id + '_list',\n                \"aria-activedescendant\": $options.focusedOptionId,\n                onKeydown: $options.onFilterKeyDown,\n                onBlur: $options.onFilterBlur,\n                onInput: $options.onFilterChange,\n                pt: _ctx.ptm('pcFilter')\n              }, null, 8, [\"value\", \"onVnodeMounted\", \"onVnodeUpdated\", \"class\", \"placeholder\", \"variant\", \"unstyled\", \"aria-owns\", \"aria-activedescendant\", \"onKeydown\", \"onBlur\", \"onInput\", \"pt\"]), createVNode(_component_InputIcon, mergeProps({\n                unstyled: _ctx.unstyled\n              }, _ctx.ptm('pcFilterIconContainer')), {\n                \"default\": withCtx(function () {\n                  return [renderSlot(_ctx.$slots, \"filtericon\", {}, function () {\n                    return [_ctx.filterIcon ? (openBlock(), createElementBlock(\"span\", mergeProps({\n                      key: 0,\n                      \"class\": _ctx.filterIcon\n                    }, _ctx.ptm('filterIcon')), null, 16)) : (openBlock(), createBlock(_component_SearchIcon, normalizeProps(mergeProps({\n                      key: 1\n                    }, _ctx.ptm('filterIcon'))), null, 16))];\n                  })];\n                }),\n                _: 3\n              }, 16, [\"unstyled\"])];\n            }),\n            _: 3\n          }, 8, [\"unstyled\", \"pt\"]), createElementVNode(\"span\", mergeProps({\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            \"class\": \"p-hidden-accessible\"\n          }, _ctx.ptm('hiddenFilterResult'), {\n            \"data-p-hidden-accessible\": true\n          }), toDisplayString($options.filterResultMessageText), 17)], 16)) : createCommentVNode(\"\", true), createElementVNode(\"div\", mergeProps({\n            \"class\": _ctx.cx('listContainer'),\n            style: {\n              'max-height': $options.virtualScrollerDisabled ? _ctx.scrollHeight : ''\n            }\n          }, _ctx.ptm('listContainer')), [createVNode(_component_VirtualScroller, mergeProps({\n            ref: $options.virtualScrollerRef\n          }, _ctx.virtualScrollerOptions, {\n            items: $options.visibleOptions,\n            style: {\n              height: _ctx.scrollHeight\n            },\n            tabindex: -1,\n            disabled: $options.virtualScrollerDisabled,\n            pt: _ctx.ptm('virtualScroller')\n          }), createSlots({\n            content: withCtx(function (_ref) {\n              var styleClass = _ref.styleClass,\n                contentRef = _ref.contentRef,\n                items = _ref.items,\n                getItemOptions = _ref.getItemOptions,\n                contentStyle = _ref.contentStyle,\n                itemSize = _ref.itemSize;\n              return [createElementVNode(\"ul\", mergeProps({\n                ref: function ref(el) {\n                  return $options.listRef(el, contentRef);\n                },\n                id: $data.id + '_list',\n                \"class\": [_ctx.cx('list'), styleClass],\n                style: contentStyle,\n                role: \"listbox\"\n              }, _ctx.ptm('list')), [(openBlock(true), createElementBlock(Fragment, null, renderList(items, function (option, i) {\n                return openBlock(), createElementBlock(Fragment, {\n                  key: $options.getOptionRenderKey(option, $options.getOptionIndex(i, getItemOptions))\n                }, [$options.isOptionGroup(option) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                  key: 0,\n                  id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n                  style: {\n                    height: itemSize ? itemSize + 'px' : undefined\n                  },\n                  \"class\": _ctx.cx('optionGroup'),\n                  role: \"option\",\n                  ref_for: true\n                }, _ctx.ptm('optionGroup')), [renderSlot(_ctx.$slots, \"optiongroup\", {\n                  option: option.optionGroup,\n                  index: $options.getOptionIndex(i, getItemOptions)\n                }, function () {\n                  return [createElementVNode(\"span\", mergeProps({\n                    \"class\": _ctx.cx('optionGroupLabel'),\n                    ref_for: true\n                  }, _ctx.ptm('optionGroupLabel')), toDisplayString($options.getOptionGroupLabel(option.optionGroup)), 17)];\n                })], 16, _hoisted_5)) : withDirectives((openBlock(), createElementBlock(\"li\", mergeProps({\n                  key: 1,\n                  id: $data.id + '_' + $options.getOptionIndex(i, getItemOptions),\n                  \"class\": _ctx.cx('option', {\n                    option: option,\n                    focusedOption: $options.getOptionIndex(i, getItemOptions)\n                  }),\n                  style: {\n                    height: itemSize ? itemSize + 'px' : undefined\n                  },\n                  role: \"option\",\n                  \"aria-label\": $options.getOptionLabel(option),\n                  \"aria-selected\": $options.isSelected(option),\n                  \"aria-disabled\": $options.isOptionDisabled(option),\n                  \"aria-setsize\": $options.ariaSetSize,\n                  \"aria-posinset\": $options.getAriaPosInset($options.getOptionIndex(i, getItemOptions)),\n                  onClick: function onClick($event) {\n                    return $options.onOptionSelect($event, option);\n                  },\n                  onMousemove: function onMousemove($event) {\n                    return $options.onOptionMouseMove($event, $options.getOptionIndex(i, getItemOptions));\n                  },\n                  \"data-p-selected\": $options.isSelected(option),\n                  \"data-p-focused\": $data.focusedOptionIndex === $options.getOptionIndex(i, getItemOptions),\n                  \"data-p-disabled\": $options.isOptionDisabled(option),\n                  ref_for: true\n                }, $options.getPTItemOptions(option, getItemOptions, i, 'option')), [_ctx.checkmark ? (openBlock(), createElementBlock(Fragment, {\n                  key: 0\n                }, [$options.isSelected(option) ? (openBlock(), createBlock(_component_CheckIcon, mergeProps({\n                  key: 0,\n                  \"class\": _ctx.cx('optionCheckIcon'),\n                  ref_for: true\n                }, _ctx.ptm('optionCheckIcon')), null, 16, [\"class\"])) : (openBlock(), createBlock(_component_BlankIcon, mergeProps({\n                  key: 1,\n                  \"class\": _ctx.cx('optionBlankIcon'),\n                  ref_for: true\n                }, _ctx.ptm('optionBlankIcon')), null, 16, [\"class\"]))], 64)) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, \"option\", {\n                  option: option,\n                  selected: $options.isSelected(option),\n                  index: $options.getOptionIndex(i, getItemOptions)\n                }, function () {\n                  return [createElementVNode(\"span\", mergeProps({\n                    \"class\": _ctx.cx('optionLabel'),\n                    ref_for: true\n                  }, _ctx.ptm('optionLabel')), toDisplayString($options.getOptionLabel(option)), 17)];\n                })], 16, _hoisted_6)), [[_directive_ripple]])], 64);\n              }), 128)), $data.filterValue && (!items || items && items.length === 0) ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                key: 0,\n                \"class\": _ctx.cx('emptyMessage'),\n                role: \"option\"\n              }, _ctx.ptm('emptyMessage'), {\n                \"data-p-hidden-accessible\": true\n              }), [renderSlot(_ctx.$slots, \"emptyfilter\", {}, function () {\n                return [createTextVNode(toDisplayString($options.emptyFilterMessageText), 1)];\n              })], 16)) : !_ctx.options || _ctx.options && _ctx.options.length === 0 ? (openBlock(), createElementBlock(\"li\", mergeProps({\n                key: 1,\n                \"class\": _ctx.cx('emptyMessage'),\n                role: \"option\"\n              }, _ctx.ptm('emptyMessage'), {\n                \"data-p-hidden-accessible\": true\n              }), [renderSlot(_ctx.$slots, \"empty\", {}, function () {\n                return [createTextVNode(toDisplayString($options.emptyMessageText), 1)];\n              })], 16)) : createCommentVNode(\"\", true)], 16, _hoisted_4)];\n            }),\n            _: 2\n          }, [_ctx.$slots.loader ? {\n            name: \"loader\",\n            fn: withCtx(function (_ref2) {\n              var options = _ref2.options;\n              return [renderSlot(_ctx.$slots, \"loader\", {\n                options: options\n              })];\n            }),\n            key: \"0\"\n          } : undefined]), 1040, [\"items\", \"style\", \"disabled\", \"pt\"])], 16), renderSlot(_ctx.$slots, \"footer\", {\n            value: _ctx.modelValue,\n            options: $options.visibleOptions\n          }), !_ctx.options || _ctx.options && _ctx.options.length === 0 ? (openBlock(), createElementBlock(\"span\", mergeProps({\n            key: 1,\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            \"class\": \"p-hidden-accessible\"\n          }, _ctx.ptm('hiddenEmptyMessage'), {\n            \"data-p-hidden-accessible\": true\n          }), toDisplayString($options.emptyMessageText), 17)) : createCommentVNode(\"\", true), createElementVNode(\"span\", mergeProps({\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            \"class\": \"p-hidden-accessible\"\n          }, _ctx.ptm('hiddenSelectedMessage'), {\n            \"data-p-hidden-accessible\": true\n          }), toDisplayString($options.selectedMessageText), 17), createElementVNode(\"span\", mergeProps({\n            ref: \"lastHiddenFocusableElementOnOverlay\",\n            role: \"presentation\",\n            \"aria-hidden\": \"true\",\n            \"class\": \"p-hidden-accessible p-hidden-focusable\",\n            tabindex: 0,\n            onFocus: _cache[8] || (_cache[8] = function () {\n              return $options.onLastHiddenFocus && $options.onLastHiddenFocus.apply($options, arguments);\n            })\n          }, _ctx.ptm('hiddenLastFocusableEl'), {\n            \"data-p-hidden-accessible\": true,\n            \"data-p-hidden-focusable\": true\n          }), null, 16)], 16)) : createCommentVNode(\"\", true)];\n        }),\n        _: 3\n      }, 16, [\"onEnter\", \"onAfterEnter\", \"onLeave\", \"onAfterLeave\"])];\n    }),\n    _: 3\n  }, 8, [\"appendTo\"])], 16, _hoisted_1);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n",
      "start": 1731941016145,
      "end": 1731941016451,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941016451,
      "end": 1731941016451,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941016451,
      "end": 1731941016452,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941016452,
      "end": 1731941016452,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941016452,
      "end": 1731941016452,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941016452,
      "end": 1731941016452,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941016452,
      "end": 1731941016452,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941016452,
      "end": 1731941016452,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941016452,
      "end": 1731941016452,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941016452,
      "end": 1731941016452,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941016452,
      "end": 1731941016452,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941016452,
      "end": 1731941016453,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941016453,
      "end": 1731941016453,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941016453,
      "end": 1731941016454,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941016454,
      "end": 1731941016454,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941016454,
      "end": 1731941016454,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941016454,
      "end": 1731941016454,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941016454,
      "end": 1731941016454,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941016454,
      "end": 1731941016454,
      "order": "normal"
    }
  ]
}
