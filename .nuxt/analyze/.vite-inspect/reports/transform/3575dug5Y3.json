{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/vuetify/lib/components/VFileInput/VFileInput.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { resolveDirective as _resolveDirective, createVNode as _createVNode, mergeProps as _mergeProps, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"./VFileInput.css\";\n\n// Components\nimport { VChip } from \"../VChip/index.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\";\nimport { VField } from \"../VField/index.mjs\";\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\"; // Composables\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed, nextTick, ref, watch } from 'vue';\nimport { callEvent, filterInputAttrs, genericComponent, humanReadableFileSize, propsFactory, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\nexport const makeVFileInputProps = propsFactory({\n  chips: Boolean,\n  counter: Boolean,\n  counterSizeString: {\n    type: String,\n    default: '$vuetify.fileInput.counterSize'\n  },\n  counterString: {\n    type: String,\n    default: '$vuetify.fileInput.counter'\n  },\n  multiple: Boolean,\n  showSize: {\n    type: [Boolean, Number, String],\n    default: false,\n    validator: v => {\n      return typeof v === 'boolean' || [1000, 1024].includes(Number(v));\n    }\n  },\n  ...makeVInputProps({\n    prependIcon: '$file'\n  }),\n  modelValue: {\n    type: Array,\n    default: () => [],\n    validator: val => {\n      return wrapInArray(val).every(v => v != null && typeof v === 'object');\n    }\n  },\n  ...makeVFieldProps({\n    clearable: true\n  })\n}, 'VFileInput');\nexport const VFileInput = genericComponent()({\n  name: 'VFileInput',\n  inheritAttrs: false,\n  props: makeVFileInputProps(),\n  emits: {\n    'click:control': e => true,\n    'mousedown:control': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': files => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const base = computed(() => typeof props.showSize !== 'boolean' ? props.showSize : undefined);\n    const totalBytes = computed(() => (model.value ?? []).reduce((bytes, _ref2) => {\n      let {\n        size = 0\n      } = _ref2;\n      return bytes + size;\n    }, 0));\n    const totalBytesReadable = computed(() => humanReadableFileSize(totalBytes.value, base.value));\n    const fileNames = computed(() => (model.value ?? []).map(file => {\n      const {\n        name = '',\n        size = 0\n      } = file;\n      return !props.showSize ? name : `${name} (${humanReadableFileSize(size, base.value)})`;\n    }));\n    const counterValue = computed(() => {\n      const fileCount = model.value?.length ?? 0;\n      if (props.showSize) return t(props.counterSizeString, fileCount, totalBytesReadable.value);else return t(props.counterString, fileCount);\n    });\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const inputRef = ref();\n    const isActive = computed(() => isFocused.value || props.active);\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant));\n    function onFocus() {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus();\n      }\n      if (!isFocused.value) focus();\n    }\n    function onClickPrepend(e) {\n      inputRef.value?.click();\n    }\n    function onControlMousedown(e) {\n      emit('mousedown:control', e);\n    }\n    function onControlClick(e) {\n      inputRef.value?.click();\n      emit('click:control', e);\n    }\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = [];\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n    watch(model, newValue => {\n      const hasModelReset = !Array.isArray(newValue) || !newValue.length;\n      if (hasModelReset && inputRef.value) {\n        inputRef.value.value = '';\n      }\n    });\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const {\n        modelValue: _,\n        ...inputProps\n      } = VInput.filterProps(props);\n      const fieldProps = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-file-input', {\n          'v-file-input--chips': !!props.chips,\n          'v-input--plain-underlined': isPlainOrUnderlined.value\n        }, props.class],\n        \"style\": props.style,\n        \"onClick:prepend\": onClickPrepend\n      }, rootAttrs, inputProps, {\n        \"centerAffix\": !isPlainOrUnderlined.value,\n        \"focused\": isFocused.value\n      }), {\n        ...slots,\n        default: _ref3 => {\n          let {\n            id,\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref3;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"prepend-icon\": props.prependIcon,\n            \"onMousedown\": onControlMousedown,\n            \"onClick\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner']\n          }, fieldProps, {\n            \"id\": id.value,\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value,\n            \"disabled\": isDisabled.value,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), {\n            ...slots,\n            default: _ref4 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref4;\n              return _createVNode(_Fragment, null, [_createVNode(\"input\", _mergeProps({\n                \"ref\": inputRef,\n                \"type\": \"file\",\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"multiple\": props.multiple,\n                \"name\": props.name,\n                \"onClick\": e => {\n                  e.stopPropagation();\n                  if (isReadonly.value) e.preventDefault();\n                  onFocus();\n                },\n                \"onChange\": e => {\n                  if (!e.target) return;\n                  const target = e.target;\n                  model.value = [...(target.files ?? [])];\n                },\n                \"onFocus\": onFocus,\n                \"onBlur\": blur\n              }, slotProps, inputAttrs), null), _createVNode(\"div\", {\n                \"class\": fieldClass\n              }, [!!model.value?.length && (slots.selection ? slots.selection({\n                fileNames: fileNames.value,\n                totalBytes: totalBytes.value,\n                totalBytesReadable: totalBytesReadable.value\n              }) : props.chips ? fileNames.value.map(text => _createVNode(VChip, {\n                \"key\": text,\n                \"size\": \"small\",\n                \"color\": props.color\n              }, {\n                default: () => [text]\n              })) : fileNames.value.join(', '))])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => _createVNode(_Fragment, null, [slots.details?.(slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": !!model.value?.length,\n          \"value\": counterValue.value\n        }, slots.counter)])]) : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef);\n  }\n});\n//# sourceMappingURL=VFileInput.mjs.map",
      "start": 1731941018540,
      "end": 1731941018776,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941018776,
      "end": 1731941018776,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941018776,
      "end": 1731941018776,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941018776,
      "end": 1731941018776,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941018776,
      "end": 1731941018776,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941018776,
      "end": 1731941018776,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941018776,
      "end": 1731941018776,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941018777,
      "end": 1731941018777,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941018778,
      "end": 1731941018778,
      "order": "normal"
    }
  ]
}
