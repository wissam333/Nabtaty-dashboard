{
  "resolvedId": "D:/Projects/Nabtaty-dashboard-de3bd56d6663c71275c3f076b188500fce6955c7/node_modules/vuetify/lib/components/VTabs/VTab.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\n// Styles\nimport \"./VTab.css\";\n\n// Components\nimport { makeVBtnProps, VBtn } from \"../VBtn/VBtn.mjs\"; // Composables\nimport { useTextColor } from \"../../composables/color.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\nimport { computed, ref } from 'vue';\nimport { VTabsSymbol } from \"./shared.mjs\";\nimport { animate, genericComponent, omit, propsFactory, standardEasing, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVTabProps = propsFactory({\n  fixed: Boolean,\n  sliderColor: String,\n  hideSlider: Boolean,\n  direction: {\n    type: String,\n    default: 'horizontal'\n  },\n  ...omit(makeVBtnProps({\n    selectedClass: 'v-tab--selected',\n    variant: 'text'\n  }), ['active', 'block', 'flat', 'location', 'position', 'symbol'])\n}, 'VTab');\nexport const VTab = genericComponent()({\n  name: 'VTab',\n  props: makeVTabProps(),\n  setup(props, _ref) {\n    let {\n      slots,\n      attrs\n    } = _ref;\n    const {\n      textColorClasses: sliderColorClasses,\n      textColorStyles: sliderColorStyles\n    } = useTextColor(props, 'sliderColor');\n    const rootEl = ref();\n    const sliderEl = ref();\n    const isHorizontal = computed(() => props.direction === 'horizontal');\n    const isSelected = computed(() => rootEl.value?.group?.isSelected.value ?? false);\n    function updateSlider(_ref2) {\n      let {\n        value\n      } = _ref2;\n      if (value) {\n        const prevEl = rootEl.value?.$el.parentElement?.querySelector('.v-tab--selected .v-tab__slider');\n        const nextEl = sliderEl.value;\n        if (!prevEl || !nextEl) return;\n        const color = getComputedStyle(prevEl).color;\n        const prevBox = prevEl.getBoundingClientRect();\n        const nextBox = nextEl.getBoundingClientRect();\n        const xy = isHorizontal.value ? 'x' : 'y';\n        const XY = isHorizontal.value ? 'X' : 'Y';\n        const rightBottom = isHorizontal.value ? 'right' : 'bottom';\n        const widthHeight = isHorizontal.value ? 'width' : 'height';\n        const prevPos = prevBox[xy];\n        const nextPos = nextBox[xy];\n        const delta = prevPos > nextPos ? prevBox[rightBottom] - nextBox[rightBottom] : prevBox[xy] - nextBox[xy];\n        const origin = Math.sign(delta) > 0 ? isHorizontal.value ? 'right' : 'bottom' : Math.sign(delta) < 0 ? isHorizontal.value ? 'left' : 'top' : 'center';\n        const size = Math.abs(delta) + (Math.sign(delta) < 0 ? prevBox[widthHeight] : nextBox[widthHeight]);\n        const scale = size / Math.max(prevBox[widthHeight], nextBox[widthHeight]) || 0;\n        const initialScale = prevBox[widthHeight] / nextBox[widthHeight] || 0;\n        const sigma = 1.5;\n        animate(nextEl, {\n          backgroundColor: [color, 'currentcolor'],\n          transform: [`translate${XY}(${delta}px) scale${XY}(${initialScale})`, `translate${XY}(${delta / sigma}px) scale${XY}(${(scale - 1) / sigma + 1})`, 'none'],\n          transformOrigin: Array(3).fill(origin)\n        }, {\n          duration: 225,\n          easing: standardEasing\n        });\n      }\n    }\n    useRender(() => {\n      const btnProps = VBtn.filterProps(props);\n      return _createVNode(VBtn, _mergeProps({\n        \"symbol\": VTabsSymbol,\n        \"ref\": rootEl,\n        \"class\": ['v-tab', props.class],\n        \"style\": props.style,\n        \"tabindex\": isSelected.value ? 0 : -1,\n        \"role\": \"tab\",\n        \"aria-selected\": String(isSelected.value),\n        \"active\": false\n      }, btnProps, attrs, {\n        \"block\": props.fixed,\n        \"maxWidth\": props.fixed ? 300 : undefined,\n        \"onGroup:selected\": updateSlider\n      }), {\n        ...slots,\n        default: () => _createVNode(_Fragment, null, [slots.default?.() ?? props.text, !props.hideSlider && _createVNode(\"div\", {\n          \"ref\": sliderEl,\n          \"class\": ['v-tab__slider', sliderColorClasses.value],\n          \"style\": sliderColorStyles.value\n        }, null)])\n      });\n    });\n    return forwardRefs({}, rootEl);\n  }\n});\n//# sourceMappingURL=VTab.mjs.map",
      "start": 1731941019134,
      "end": 1731941019338,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019338,
      "end": 1731941019338,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1731941019338,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "post"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1731941019339,
      "end": 1731941019339,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1731941019340,
      "end": 1731941019340,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1731941019340,
      "end": 1731941019340,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1731941019340,
      "end": 1731941019340,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1731941019340,
      "end": 1731941019340,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1731941019340,
      "end": 1731941019340,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1731941019340,
      "end": 1731941019340,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1731941019340,
      "end": 1731941019340,
      "order": "normal"
    }
  ]
}
